
#include "hyphenLexer"

#include <quex/code_base/analyzer/C-adaptions.h>
/* The file 'multi.i' contains implementations which are the same for all 
 * possibly generated analyzers. If QUEX_OPTION_MULTI is defined, it is
 * NOT supposed to be included here. If not--in which case we have a single
 * analzer--then it is included.                                             */
#include <quex/code_base/single.i>

QUEX_NAMESPACE_MAIN_OPEN
QUEX_NAME(Mode) QUEX_NAME(PROGRAM) = {
    /* id                */ QUEX_NAME(ModeID_PROGRAM),
    /* name              */ "PROGRAM",
#   if      defined(QUEX_OPTION_INDENTATION_TRIGGER) \
       && ! defined(QUEX_OPTION_INDENTATION_DEFAULT_HANDLER)
    /* on_indentation    */ QUEX_NAME(Mode_on_indentation_null_function),
#   endif
    /* on_entry          */ QUEX_NAME(Mode_on_entry_exit_null_function),
    /* on_exit           */ QUEX_NAME(Mode_on_entry_exit_null_function),
#   if      defined(QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK)
    /* has_base          */ QUEX_NAME(PROGRAM_has_base),
    /* has_entry_from    */ QUEX_NAME(PROGRAM_has_entry_from),
    /* has_exit_to       */ QUEX_NAME(PROGRAM_has_exit_to),
#   endif
    /* analyzer_function */ QUEX_NAME(PROGRAM_analyzer_function)
};

QUEX_NAME(Mode)* (QUEX_NAME(mode_db)[__QUEX_SETTING_MAX_MODE_CLASS_N]) = {
    &QUEX_NAME(PROGRAM)
};
#define self        (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
#define LexemeNull  (&QUEX_LEXEME_NULL)
#define RETURN      return

void
QUEX_NAME(PROGRAM_on_entry)(QUEX_TYPE_ANALYZER* me, const QUEX_NAME(Mode)* FromMode) {
    (void)me;
    (void)FromMode;
#   ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
    QUEX_NAME(PROGRAM).has_entry_from(FromMode);
#   endif

}

void
QUEX_NAME(PROGRAM_on_exit)(QUEX_TYPE_ANALYZER* me, const QUEX_NAME(Mode)* ToMode)  {
    (void)me;
    (void)ToMode;
#   ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
    QUEX_NAME(PROGRAM).has_exit_to(ToMode);
#   endif

}

#if defined(QUEX_OPTION_INDENTATION_TRIGGER) 
void
QUEX_NAME(PROGRAM_on_indentation)(QUEX_TYPE_ANALYZER*    me, 
                                        QUEX_TYPE_INDENTATION  Indentation, 
                                        QUEX_TYPE_LEXATOM*   Begin) {
    (void)me;
    (void)Indentation;
    (void)Begin;
    return;
}
#endif

#ifdef QUEX_OPTION_RUNTIME_MODE_TRANSITION_CHECK
bool
QUEX_NAME(PROGRAM_has_base)(const QUEX_NAME(Mode)* Mode) {
    (void)Mode;
    return false;
}
bool
QUEX_NAME(PROGRAM_has_entry_from)(const QUEX_NAME(Mode)* Mode) {
    (void)Mode;
switch( Mode->id ) {

    case QUEX_NAME(ModeID_PROGRAM): {

    return true;
    }

    default: {

    return true;
    }

    }

}
bool
QUEX_NAME(PROGRAM_has_exit_to)(const QUEX_NAME(Mode)* Mode) {
    (void)Mode;
switch( Mode->id ) {

    case QUEX_NAME(ModeID_PROGRAM): {

    return true;
    }

    default: {

    return true;
    }

    }

}
#endif    
#undef self
#undef LexemeNull
#undef RETURN
QUEX_NAMESPACE_MAIN_CLOSE

/* #include "hyphenLexer"*/
QUEX_NAMESPACE_MAIN_OPEN
#ifdef      QUEX_FUNCTION_COUNT_ARBITRARY
#   undef   QUEX_FUNCTION_COUNT_ARBITRARY
#endif
#ifdef      QUEX_OPTION_COUNTER
#    define QUEX_FUNCTION_COUNT_ARBITRARY(ME, BEGIN, END) \
            do {                              \
                QUEX_NAME(PROGRAM_counter)((ME), (BEGIN), (END));     \
                __quex_debug_counter();       \
            } while(0)
#else
#    define QUEX_FUNCTION_COUNT_ARBITRARY(ME, BEGIN, END) /* empty */
#endif
#ifdef QUEX_OPTION_COUNTER
static void
QUEX_NAME(PROGRAM_counter)(QUEX_TYPE_ANALYZER* me, QUEX_TYPE_LEXATOM* LexemeBegin, QUEX_TYPE_LEXATOM* LexemeEnd)
{
#   define self (*me)
/*  'QUEX_GOTO_STATE' requires 'QUEX_LABEL_STATE_ROUTER' */
#   define QUEX_LABEL_STATE_ROUTER _20
    QUEX_TYPE_LEXATOM              input                          = (QUEX_TYPE_LEXATOM)(0x00);
    QUEX_TYPE_GOTO_LABEL           target_state_else_index        = QUEX_GOTO_LABEL_VOID;
    QUEX_TYPE_GOTO_LABEL           target_state_index             = QUEX_GOTO_LABEL_VOID;
#   ifdef QUEX_OPTION_COUNTER_COLUMN
    QUEX_TYPE_LEXATOM*             count_reference_p              = (QUEX_TYPE_LEXATOM*)0x0;
#   endif /* QUEX_OPTION_COUNTER_COLUMN */
    (void)me;
    __QUEX_IF_COUNT_SHIFT_VALUES();
    /* Allow LexemeBegin == LexemeEnd (e.g. END_OF_STREAM)
     * => Caller does not need to check
     * BUT, if so quit immediately after 'shift values'.
     */
    __quex_assert(LexemeBegin <= LexemeEnd);
    if( LexemeBegin == LexemeEnd ) {
        return;
    }
    me->buffer._read_p = LexemeBegin;

    /* (297391 from BEFORE_ENTRY)  */
    __QUEX_IF_COUNT_COLUMNS(count_reference_p = (me->buffer._read_p));

__QUEX_IF_COUNT_COLUMNS(count_reference_p = (me->buffer._read_p));

    input = *(me->buffer._read_p);

_14:
    __quex_debug("Init State\n");
    __quex_debug_state(297391);
if( input < 0xA ) {
if     ( input < 0x0 )  goto _5;
else if( input < 0x9 )  goto _4;
else                    goto _3;
} else {
if     ( input == 0xA )      goto _2;
else if( input < 0x110000 )  goto _4;
else                         goto _5;
}


    __quex_assert_no_passage();
_9:
    /* (297391 from 297395)  */
    goto _14;


    __quex_assert_no_passage();
_8:
    /* (DROP_OUT from 297394)  */
    goto _13;
_15:
    __quex_debug("Drop-Out Catcher\n");


    __quex_assert_no_passage();
_6:
    /* (DROP_OUT from 297392)  */
    goto _11;


    __quex_assert_no_passage();
_7:
    /* (DROP_OUT from 297393)  */
    goto _12;


    __quex_assert_no_passage();
_5:
    /* (DROP_OUT from 297391)  */
        me->buffer._read_p = me->buffer._lexeme_start_p + 1;
goto _16;
    goto _15;


    __quex_assert_no_passage();
_2:
    /* (297392 from 297391)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(297392);
goto _6;


    __quex_assert_no_passage();
_3:
    /* (297393 from 297391)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(297393);
goto _7;


    __quex_assert_no_passage();
_4:
    /* (297394 from 297391)  */
    ++(me->buffer._read_p);

    input = *(me->buffer._read_p);


    __quex_debug_state(297394);
goto _8;

    /* (*) Terminal states _______________________________________________________
     *
     * States that implement actions of the 'winner patterns.                     */
_10:
    __quex_debug("* TERMINAL <LOOP EXIT>\n");
    --(me->buffer._read_p);

__QUEX_IF_COUNT_COLUMNS_ADD((size_t)(((me->buffer._read_p) - count_reference_p)));

goto _0;

_11:
    __quex_debug("* TERMINAL <LOOP 1730>\n");
__QUEX_IF_COUNT_LINES_ADD((size_t)1);

    __QUEX_IF_COUNT_COLUMNS((me->counter._column_number_at_end) = (size_t)1);

__QUEX_IF_COUNT_COLUMNS(count_reference_p = (me->buffer._read_p));

if( me->buffer._read_p != LexemeEnd ) goto _9;

goto _0;

_12:
    __quex_debug("* TERMINAL <LOOP 1731>\n");
__QUEX_IF_COUNT_COLUMNS_ADD((size_t)(((me->buffer._read_p) - count_reference_p - 1)));

__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end -= 1);
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end &= ~ ((size_t)0x3));
__QUEX_IF_COUNT_COLUMNS(self.counter._column_number_at_end += 4 + 1);

__QUEX_IF_COUNT_COLUMNS(count_reference_p = (me->buffer._read_p));

if( me->buffer._read_p != LexemeEnd ) goto _9;

goto _0;

_13:
    __quex_debug("* TERMINAL <LOOP 1732>\n");
if( me->buffer._read_p != LexemeEnd ) goto _9;

__QUEX_IF_COUNT_COLUMNS_ADD((size_t)(((me->buffer._read_p) - count_reference_p)));

goto _0;

if(0) {
    /* Avoid unreferenced labels. */
    goto _10;
    goto _11;
    goto _12;
    goto _13;
}
_21: /* TERMINAL: BAD_LEXATOM */
;
_16: /* TERMINAL: FAILURE     */
goto _0;
_0:
/* Assert: lexeme in codec's character boundaries. */

     __quex_assert(me->buffer._read_p == LexemeEnd);
    return;
#   ifndef QUEX_OPTION_COMPUTED_GOTOS
    __quex_assert_no_passage();
_20:
#   endif /* QUEX_OPTION_COMPUTED_GOTOS */

#undef self


#undef QUEX_LABEL_STATE_ROUTER

#    if ! defined(QUEX_OPTION_COMPUTED_GOTOS)
     goto _20; /* in QUEX_GOTO_STATE       */
     goto _21; /* to BAD_LEXATOM           */
#    endif
    /* Avoid compiler warning: 'Unused labels' */

    goto _16;
    (void)target_state_index;
    (void)target_state_else_index;
}
#endif /* QUEX_OPTION_COUNTER */

#include <quex/code_base/buffer/Buffer>
#include <quex/code_base/token/TokenQueue>

#ifdef    CONTINUE
#   undef CONTINUE
#endif
#define   CONTINUE do { goto _82; } while(0)

#ifdef    RETURN
#   undef RETURN
#endif
#define   RETURN   do { goto _81; } while(0)

__QUEX_TYPE_ANALYZER_RETURN_VALUE  
QUEX_NAME(PROGRAM_analyzer_function)(QUEX_TYPE_ANALYZER* me) 
{
    /* NOTE: Different modes correspond to different analyzer functions. The 
     *       analyzer functions are all located inside the main class as static
     *       functions. That means, they are something like 'globals'. They 
     *       receive a pointer to the lexical analyzer, since static members do
     *       not have access to the 'this' pointer.                          */
#   ifdef     self
#       undef self
#   endif
#   define self (*((QUEX_TYPE_ANALYZER*)me))
/*  'QUEX_GOTO_STATE' requires 'QUEX_LABEL_STATE_ROUTER' */
#   define QUEX_LABEL_STATE_ROUTER _85
#   define PROGRAM    (QUEX_NAME(PROGRAM))

    /* Lexeme setup: 
     *
     * There is a temporary zero stored at the end of each lexeme, if the action 
     * references to the 'Lexeme'. 'LexemeNull' provides a reference to an empty
     * zero terminated string.                                                    */
#if defined(QUEX_OPTION_ASSERTS)
#   define Lexeme       QUEX_NAME(access_Lexeme)((const char*)__FILE__, (size_t)__LINE__, &me->buffer)
#   define LexemeBegin  QUEX_NAME(access_LexemeBegin)((const char*)__FILE__, (size_t)__LINE__, &me->buffer)
#   define LexemeL      QUEX_NAME(access_LexemeL)((const char*)__FILE__, (size_t)__LINE__, &me->buffer)
#   define LexemeEnd    QUEX_NAME(access_LexemeEnd)((const char*)__FILE__, (size_t)__LINE__, &me->buffer)
#else
#   define Lexeme       (me->buffer._lexeme_start_p)
#   define LexemeBegin  Lexeme
#   define LexemeL      ((size_t)(me->buffer._read_p - me->buffer._lexeme_start_p))
#   define LexemeEnd    me->buffer._read_p
#endif

#define LexemeNull      (&QUEX_LEXEME_NULL)
    E_LoadResult                   load_result                    = E_LoadResult_VOID;
    QUEX_TYPE_ACCEPTANCE_ID        last_acceptance               /* un-initilized */;
    QUEX_TYPE_GOTO_LABEL           target_state_else_index        = QUEX_GOTO_LABEL_VOID;
    const size_t                   PositionRegisterN              = (size_t)1;
    QUEX_TYPE_LEXATOM*             position[1]                    = { 0};
    QUEX_TYPE_LEXATOM              input                          = (QUEX_TYPE_LEXATOM)(0x00);
    QUEX_TYPE_GOTO_LABEL           target_state_index             = QUEX_GOTO_LABEL_VOID;

    /* Post context positions do not have to be reset or initialized. If a state
     * is reached which is associated with 'end of post context' it is clear what
     * post context is meant. This results from the ways the state machine is 
     * constructed. Post context position's live cycle:
     *
     * (1)   unitialized (don't care)
     * (1.b) on buffer reload it may, or may not be adapted (don't care)
     * (2)   when a post context begin state is passed, then it is **SET** (now: take care)
     * (2.b) on buffer reload it **is adapted**.
     * (3)   when a terminal state of the post context is reached (which can only be reached
     *       for that particular post context), then the post context position is used
     *       to reset the input position.                                              */
#   if defined(QUEX_OPTION_ASSERTS)
    me->DEBUG_analyzer_function_at_entry = me->current_analyzer_function;
#   endif
_84:
    me->buffer._lexeme_start_p = me->buffer._read_p;
    QUEX_LEXEME_TERMINATING_ZERO_UNDO(&me->buffer);
_9:
    /* (297380 from BEFORE_ENTRY) (297380 from RELOAD_FORWARD)  */

    input = *(me->buffer._read_p);


    __quex_debug("Init State\n");
    __quex_debug_state(297380);
if( input < 0x2150 ) {
if( input < 0x530 ) {
if( input < 0x7F ) {
switch( input ) {
case 0x0: goto _29;
case 0x9: goto _11;
case 0xA: case 0xB: case 0xC: case 0xD: goto _10;
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: 
case 0x60: case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: case 0x7B: case 0x7C: case 0x7D: case 0x7E: goto _11;
default: goto _23;
}
} else {
switch( input ) {
case 0x7F: case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: goto _23;
case 0x85: goto _10;
case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: 
case 0xAD: 
case 0x250: case 0x251: case 0x252: case 0x253: case 0x254: case 0x255: case 0x256: case 0x257: 
case 0x258: case 0x259: case 0x25A: case 0x25B: case 0x25C: case 0x25D: case 0x25E: case 0x25F: 
case 0x260: case 0x261: case 0x262: case 0x263: case 0x264: case 0x265: case 0x266: case 0x267: 
case 0x268: case 0x269: case 0x26A: case 0x26B: case 0x26C: case 0x26D: case 0x26E: case 0x26F: 
case 0x270: case 0x271: case 0x272: case 0x273: case 0x274: case 0x275: case 0x276: case 0x277: 
case 0x278: case 0x279: case 0x27A: case 0x27B: case 0x27C: case 0x27D: case 0x27E: case 0x27F: 
case 0x280: case 0x281: case 0x282: case 0x283: case 0x284: case 0x285: case 0x286: case 0x287: 
case 0x288: case 0x289: case 0x28A: case 0x28B: case 0x28C: case 0x28D: case 0x28E: case 0x28F: 
case 0x290: case 0x291: case 0x292: case 0x293: case 0x294: case 0x295: case 0x296: case 0x297: 
case 0x298: case 0x299: case 0x29A: case 0x29B: case 0x29C: case 0x29D: case 0x29E: case 0x29F: 
case 0x2A0: case 0x2A1: case 0x2A2: case 0x2A3: case 0x2A4: case 0x2A5: case 0x2A6: case 0x2A7: 
case 0x2A8: case 0x2A9: case 0x2AA: case 0x2AB: case 0x2AC: case 0x2AD: case 0x2AE: case 0x2AF: goto _23;
default: goto _11;
}
}
} else {
if( input < 0x202A ) {
if( input < 0x1F00 ) {
if     ( input < 0x1D00 )  goto _23;
else if( input < 0x1E00 )  goto _11;
else                       goto _23;
} else {
if     ( input < 0x200B )  goto _11;
else if( input < 0x2010 )  goto _23;
else if( input < 0x2028 )  goto _11;
else                       goto _10;
}
} else {
switch( input ) {
case 0x202A: case 0x202B: case 0x202C: case 0x202D: case 0x202E: 
case 0x2060: case 0x2061: case 0x2062: case 0x2063: case 0x2064: 
case 0x2066: case 0x2067: 
case 0x2068: case 0x2069: case 0x206A: case 0x206B: case 0x206C: case 0x206D: case 0x206E: case 0x206F: 
case 0x2070: case 0x2071: case 0x2072: case 0x2073: case 0x2074: case 0x2075: case 0x2076: case 0x2077: 
case 0x2078: case 0x2079: case 0x207A: case 0x207B: case 0x207C: case 0x207D: case 0x207E: case 0x207F: 
case 0x2080: case 0x2081: case 0x2082: case 0x2083: case 0x2084: case 0x2085: case 0x2086: case 0x2087: 
case 0x2088: case 0x2089: case 0x208A: case 0x208B: case 0x208C: case 0x208D: case 0x208E: case 0x208F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: case 0x209D: case 0x209E: case 0x209F: 
case 0x20D0: case 0x20D1: case 0x20D2: case 0x20D3: case 0x20D4: case 0x20D5: case 0x20D6: case 0x20D7: 
case 0x20D8: case 0x20D9: case 0x20DA: case 0x20DB: case 0x20DC: case 0x20DD: case 0x20DE: case 0x20DF: 
case 0x20E0: case 0x20E1: case 0x20E2: case 0x20E3: case 0x20E4: case 0x20E5: case 0x20E6: case 0x20E7: 
case 0x20E8: case 0x20E9: case 0x20EA: case 0x20EB: case 0x20EC: case 0x20ED: case 0x20EE: case 0x20EF: 
case 0x20F0: case 0x20F1: case 0x20F2: case 0x20F3: case 0x20F4: case 0x20F5: case 0x20F6: case 0x20F7: 
case 0x20F8: case 0x20F9: case 0x20FA: case 0x20FB: case 0x20FC: case 0x20FD: case 0x20FE: case 0x20FF: goto _23;
default: goto _11;
}
}
}
} else {
if( input < 0xFB00 ) {
if( input < 0x2900 ) {
if( input < 0x25A0 ) {
if     ( input < 0x2190 )  goto _23;
else if( input < 0x2400 )  goto _11;
else                       goto _23;
} else {
if     ( input < 0x2700 )  goto _11;
else if( input < 0x27C0 )  goto _23;
else if( input < 0x2800 )  goto _11;
else                       goto _23;
}
} else {
if( input < 0x2E00 ) {
if     ( input < 0x2C00 )  goto _11;
else if( input < 0x2C60 )  goto _23;
else if( input < 0x2C80 )  goto _11;
else                       goto _23;
} else {
if     ( input < 0x2E80 )  goto _11;
else if( input < 0xA720 )  goto _23;
else if( input < 0xA800 )  goto _11;
else                       goto _23;
}
}
} else {
if( input < 0x1D100 ) {
switch( input ) {
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: case 0xFB07: 
case 0xFB08: case 0xFB09: case 0xFB0A: case 0xFB0B: case 0xFB0C: case 0xFB0D: case 0xFB0E: case 0xFB0F: 
case 0xFB10: case 0xFB11: case 0xFB12: case 0xFB13: case 0xFB14: case 0xFB15: case 0xFB16: case 0xFB17: 
case 0xFB18: case 0xFB19: case 0xFB1A: case 0xFB1B: case 0xFB1C: case 0xFB1D: case 0xFB1E: case 0xFB1F: 
case 0xFB20: case 0xFB21: case 0xFB22: case 0xFB23: case 0xFB24: case 0xFB25: case 0xFB26: case 0xFB27: 
case 0xFB28: case 0xFB29: case 0xFB2A: case 0xFB2B: case 0xFB2C: case 0xFB2D: case 0xFB2E: case 0xFB2F: 
case 0xFB30: case 0xFB31: case 0xFB32: case 0xFB33: case 0xFB34: case 0xFB35: case 0xFB36: case 0xFB37: 
case 0xFB38: case 0xFB39: case 0xFB3A: case 0xFB3B: case 0xFB3C: case 0xFB3D: case 0xFB3E: case 0xFB3F: 
case 0xFB40: case 0xFB41: case 0xFB42: case 0xFB43: case 0xFB44: case 0xFB45: case 0xFB46: case 0xFB47: 
case 0xFB48: case 0xFB49: case 0xFB4A: case 0xFB4B: case 0xFB4C: case 0xFB4D: case 0xFB4E: case 0xFB4F: 
case 0xFFF0: case 0xFFF1: case 0xFFF2: case 0xFFF3: case 0xFFF4: case 0xFFF5: case 0xFFF6: case 0xFFF7: 
case 0xFFF8: 
case 0xFFFC: case 0xFFFD: case 0xFFFE: case 0xFFFF: 
case 0x10140: case 0x10141: case 0x10142: case 0x10143: case 0x10144: case 0x10145: case 0x10146: case 0x10147: 
case 0x10148: case 0x10149: case 0x1014A: case 0x1014B: case 0x1014C: case 0x1014D: case 0x1014E: case 0x1014F: 
case 0x10150: case 0x10151: case 0x10152: case 0x10153: case 0x10154: case 0x10155: case 0x10156: case 0x10157: 
case 0x10158: case 0x10159: case 0x1015A: case 0x1015B: case 0x1015C: case 0x1015D: case 0x1015E: case 0x1015F: 
case 0x10160: case 0x10161: case 0x10162: case 0x10163: case 0x10164: case 0x10165: case 0x10166: case 0x10167: 
case 0x10168: case 0x10169: case 0x1016A: case 0x1016B: case 0x1016C: case 0x1016D: case 0x1016E: case 0x1016F: 
case 0x10170: case 0x10171: case 0x10172: case 0x10173: case 0x10174: case 0x10175: case 0x10176: case 0x10177: 
case 0x10178: case 0x10179: case 0x1017A: case 0x1017B: case 0x1017C: case 0x1017D: case 0x1017E: case 0x1017F: 
case 0x10180: case 0x10181: case 0x10182: case 0x10183: case 0x10184: case 0x10185: case 0x10186: case 0x10187: 
case 0x10188: case 0x10189: case 0x1018A: case 0x1018B: case 0x1018C: case 0x1018D: case 0x1018E: case 0x1018F: goto _11;
default: goto _23;
}
} else {
if( input < 0x1D400 ) {
if     ( input < 0x1D173 )  goto _11;
else if( input < 0x1D17B )  goto _23;
else if( input < 0x1D200 )  goto _11;
else                        goto _23;
} else {
if     ( input < 0x1D800 )  goto _11;
else if( input < 0x1F600 )  goto _23;
else if( input < 0x1F916 )  goto _11;
else                        goto _23;
}
}
}
}


    __quex_assert_no_passage();
_25:
    /* (DROP_OUT from 297385) (DROP_OUT from 297384) (DROP_OUT from 297382)  */

    goto _2;
_50:
    __quex_debug("Drop-Out Catcher\n");


    __quex_assert_no_passage();
_24:
    /* (DROP_OUT from 297381)  */
    goto _1;


    __quex_assert_no_passage();
_28:
    /* (DROP_OUT from 297387) (DROP_OUT from 297388)  */
    goto _0;


    __quex_assert_no_passage();
_23:
    /* (DROP_OUT from 297380)  */
        me->buffer._read_p = me->buffer._lexeme_start_p + 1;
goto _7;
    goto _50;


    __quex_assert_no_passage();
_26:
    /* (DROP_OUT from 297383) (DROP_OUT from 297389)  */
        __quex_assert(position[0] != (void*)0);
    me->buffer._read_p = position[0];
goto _2;
    goto _50;


    __quex_assert_no_passage();
_27:
    /* (DROP_OUT from 297386)  */
switch( last_acceptance ) {
case 1722:     __quex_assert(position[0] != (void*)0);
    me->buffer._read_p = position[0];
goto _2;
case 1714:     me->buffer._read_p -= 1;
goto _0;
}

    goto _50;


    __quex_assert_no_passage();
_10:
    /* (297381 from 297380) (297381 from 297381)  */

    ++(me->buffer._read_p);

_54:
    input = *(me->buffer._read_p);


    __quex_debug_state(297381);
switch( input ) {
case 0x0: goto _31;
case 0xA: case 0xB: case 0xC: case 0xD: 
case 0x85: 
case 0x2028: case 0x2029: goto _10;
default: goto _24;
}


    __quex_assert_no_passage();
_30:
    /* (297381 from RELOAD_FORWARD)  */
    goto _54;


    __quex_assert_no_passage();
_12:
    /* (297382 from 297385) (297382 from 297384)  */

    position[0] = me->buffer._read_p; __quex_debug("position[0] = input_p;\n");

_57:
    ++(me->buffer._read_p);

    { last_acceptance = 1722; __quex_debug("last_acceptance = 1722\n"); }

_58:
    input = *(me->buffer._read_p);


    __quex_debug_state(297382);
if( input < 0x213C ) {
if( input < 0x10FC ) {
if( input < 0x386 ) {
if( input < 0x1C0 ) {
if( input < 0xA0 ) {
switch( input ) {
case 0x0: goto _33;
case 0x9: 
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: goto _11;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: goto _15;
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: goto _11;
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: goto _15;
case 0x7B: case 0x7C: case 0x7D: case 0x7E: goto _11;
default: goto _25;
}
} else {
switch( input ) {
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: case 0xAA: case 0xAB: case 0xAC: goto _11;
case 0xAD: goto _25;
case 0xAE: case 0xAF: case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: 
case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: case 0xBA: case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: 
case 0x1BB: goto _11;
default: goto _15;
}
}
} else {
if( input < 0x2EC ) {
switch( input ) {
case 0x1C0: case 0x1C1: case 0x1C2: case 0x1C3: goto _11;
case 0x250: case 0x251: case 0x252: case 0x253: case 0x254: case 0x255: case 0x256: case 0x257: 
case 0x258: case 0x259: case 0x25A: case 0x25B: case 0x25C: case 0x25D: case 0x25E: case 0x25F: 
case 0x260: case 0x261: case 0x262: case 0x263: case 0x264: case 0x265: case 0x266: case 0x267: 
case 0x268: case 0x269: case 0x26A: case 0x26B: case 0x26C: case 0x26D: case 0x26E: case 0x26F: 
case 0x270: case 0x271: case 0x272: case 0x273: case 0x274: case 0x275: case 0x276: case 0x277: 
case 0x278: case 0x279: case 0x27A: case 0x27B: case 0x27C: case 0x27D: case 0x27E: case 0x27F: 
case 0x280: case 0x281: case 0x282: case 0x283: case 0x284: case 0x285: case 0x286: case 0x287: 
case 0x288: case 0x289: case 0x28A: case 0x28B: case 0x28C: case 0x28D: case 0x28E: case 0x28F: 
case 0x290: case 0x291: case 0x292: case 0x293: goto _13;
case 0x294: goto _25;
case 0x295: case 0x296: case 0x297: 
case 0x298: case 0x299: case 0x29A: case 0x29B: case 0x29C: case 0x29D: case 0x29E: case 0x29F: 
case 0x2A0: case 0x2A1: case 0x2A2: case 0x2A3: case 0x2A4: case 0x2A5: case 0x2A6: case 0x2A7: 
case 0x2A8: case 0x2A9: case 0x2AA: case 0x2AB: case 0x2AC: case 0x2AD: case 0x2AE: case 0x2AF: goto _13;
case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: 
case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: 
case 0x2E5: case 0x2E6: case 0x2E7: case 0x2E8: case 0x2E9: case 0x2EA: case 0x2EB: goto _11;
default: goto _15;
}
} else {
switch( input ) {
case 0x2EC: 
case 0x2EE: 
case 0x370: case 0x371: case 0x372: case 0x373: case 0x374: 
case 0x376: case 0x377: 
case 0x37A: case 0x37B: case 0x37C: case 0x37D: 
case 0x37F: goto _15;
default: goto _11;
}
}
}
} else {
if( input < 0x6E7 ) {
if( input < 0x482 ) {
switch( input ) {
case 0x387: 
case 0x38B: 
case 0x38D: 
case 0x3A2: 
case 0x3F6: goto _11;
default: goto _15;
}
} else {
switch( input ) {
case 0x482: case 0x483: case 0x484: case 0x485: case 0x486: case 0x487: case 0x488: case 0x489: goto _11;
case 0x48A: case 0x48B: case 0x48C: case 0x48D: case 0x48E: case 0x48F: 
case 0x490: case 0x491: case 0x492: case 0x493: case 0x494: case 0x495: case 0x496: case 0x497: 
case 0x498: case 0x499: case 0x49A: case 0x49B: case 0x49C: case 0x49D: case 0x49E: case 0x49F: 
case 0x4A0: case 0x4A1: case 0x4A2: case 0x4A3: case 0x4A4: case 0x4A5: case 0x4A6: case 0x4A7: 
case 0x4A8: case 0x4A9: case 0x4AA: case 0x4AB: case 0x4AC: case 0x4AD: case 0x4AE: case 0x4AF: 
case 0x4B0: case 0x4B1: case 0x4B2: case 0x4B3: case 0x4B4: case 0x4B5: case 0x4B6: case 0x4B7: 
case 0x4B8: case 0x4B9: case 0x4BA: case 0x4BB: case 0x4BC: case 0x4BD: case 0x4BE: case 0x4BF: 
case 0x4C0: case 0x4C1: case 0x4C2: case 0x4C3: case 0x4C4: case 0x4C5: case 0x4C6: case 0x4C7: 
case 0x4C8: case 0x4C9: case 0x4CA: case 0x4CB: case 0x4CC: case 0x4CD: case 0x4CE: case 0x4CF: 
case 0x4D0: case 0x4D1: case 0x4D2: case 0x4D3: case 0x4D4: case 0x4D5: case 0x4D6: case 0x4D7: 
case 0x4D8: case 0x4D9: case 0x4DA: case 0x4DB: case 0x4DC: case 0x4DD: case 0x4DE: case 0x4DF: 
case 0x4E0: case 0x4E1: case 0x4E2: case 0x4E3: case 0x4E4: case 0x4E5: case 0x4E6: case 0x4E7: 
case 0x4E8: case 0x4E9: case 0x4EA: case 0x4EB: case 0x4EC: case 0x4ED: case 0x4EE: case 0x4EF: 
case 0x4F0: case 0x4F1: case 0x4F2: case 0x4F3: case 0x4F4: case 0x4F5: case 0x4F6: case 0x4F7: 
case 0x4F8: case 0x4F9: case 0x4FA: case 0x4FB: case 0x4FC: case 0x4FD: case 0x4FE: case 0x4FF: 
case 0x500: case 0x501: case 0x502: case 0x503: case 0x504: case 0x505: case 0x506: case 0x507: 
case 0x508: case 0x509: case 0x50A: case 0x50B: case 0x50C: case 0x50D: case 0x50E: case 0x50F: 
case 0x510: case 0x511: case 0x512: case 0x513: case 0x514: case 0x515: case 0x516: case 0x517: 
case 0x518: case 0x519: case 0x51A: case 0x51B: case 0x51C: case 0x51D: case 0x51E: case 0x51F: 
case 0x520: case 0x521: case 0x522: case 0x523: case 0x524: case 0x525: case 0x526: case 0x527: 
case 0x528: case 0x529: case 0x52A: case 0x52B: case 0x52C: case 0x52D: case 0x52E: case 0x52F: goto _15;
case 0x531: case 0x532: case 0x533: case 0x534: case 0x535: case 0x536: case 0x537: 
case 0x538: case 0x539: case 0x53A: case 0x53B: case 0x53C: case 0x53D: case 0x53E: case 0x53F: 
case 0x540: case 0x541: case 0x542: case 0x543: case 0x544: case 0x545: case 0x546: case 0x547: 
case 0x548: case 0x549: case 0x54A: case 0x54B: case 0x54C: case 0x54D: case 0x54E: case 0x54F: 
case 0x550: case 0x551: case 0x552: case 0x553: case 0x554: case 0x555: case 0x556: 
case 0x559: 
case 0x561: case 0x562: case 0x563: case 0x564: case 0x565: case 0x566: case 0x567: 
case 0x568: case 0x569: case 0x56A: case 0x56B: case 0x56C: case 0x56D: case 0x56E: case 0x56F: 
case 0x570: case 0x571: case 0x572: case 0x573: case 0x574: case 0x575: case 0x576: case 0x577: 
case 0x578: case 0x579: case 0x57A: case 0x57B: case 0x57C: case 0x57D: case 0x57E: case 0x57F: 
case 0x580: case 0x581: case 0x582: case 0x583: case 0x584: case 0x585: case 0x586: case 0x587: 
case 0x640: 
case 0x6E5: case 0x6E6: goto _13;
default: goto _25;
}
}
} else {
switch( input ) {
case 0x7F4: case 0x7F5: 
case 0x7FA: 
case 0x81A: 
case 0x824: 
case 0x828: 
case 0x971: 
case 0xE46: 
case 0xEC6: 
case 0x10A0: case 0x10A1: case 0x10A2: case 0x10A3: case 0x10A4: case 0x10A5: case 0x10A6: case 0x10A7: 
case 0x10A8: case 0x10A9: case 0x10AA: case 0x10AB: case 0x10AC: case 0x10AD: case 0x10AE: case 0x10AF: 
case 0x10B0: case 0x10B1: case 0x10B2: case 0x10B3: case 0x10B4: case 0x10B5: case 0x10B6: case 0x10B7: 
case 0x10B8: case 0x10B9: case 0x10BA: case 0x10BB: case 0x10BC: case 0x10BD: case 0x10BE: case 0x10BF: 
case 0x10C0: case 0x10C1: case 0x10C2: case 0x10C3: case 0x10C4: case 0x10C5: 
case 0x10C7: 
case 0x10CD: goto _13;
default: goto _25;
}
}
}
} else {
if( input < 0x1FD4 ) {
if( input < 0x1F48 ) {
if( input < 0x1AA8 ) {
switch( input ) {
case 0x10FC: 
case 0x13A0: case 0x13A1: case 0x13A2: case 0x13A3: case 0x13A4: case 0x13A5: case 0x13A6: case 0x13A7: 
case 0x13A8: case 0x13A9: case 0x13AA: case 0x13AB: case 0x13AC: case 0x13AD: case 0x13AE: case 0x13AF: 
case 0x13B0: case 0x13B1: case 0x13B2: case 0x13B3: case 0x13B4: case 0x13B5: case 0x13B6: case 0x13B7: 
case 0x13B8: case 0x13B9: case 0x13BA: case 0x13BB: case 0x13BC: case 0x13BD: case 0x13BE: case 0x13BF: 
case 0x13C0: case 0x13C1: case 0x13C2: case 0x13C3: case 0x13C4: case 0x13C5: case 0x13C6: case 0x13C7: 
case 0x13C8: case 0x13C9: case 0x13CA: case 0x13CB: case 0x13CC: case 0x13CD: case 0x13CE: case 0x13CF: 
case 0x13D0: case 0x13D1: case 0x13D2: case 0x13D3: case 0x13D4: case 0x13D5: case 0x13D6: case 0x13D7: 
case 0x13D8: case 0x13D9: case 0x13DA: case 0x13DB: case 0x13DC: case 0x13DD: case 0x13DE: case 0x13DF: 
case 0x13E0: case 0x13E1: case 0x13E2: case 0x13E3: case 0x13E4: case 0x13E5: case 0x13E6: case 0x13E7: 
case 0x13E8: case 0x13E9: case 0x13EA: case 0x13EB: case 0x13EC: case 0x13ED: case 0x13EE: case 0x13EF: 
case 0x13F0: case 0x13F1: case 0x13F2: case 0x13F3: case 0x13F4: case 0x13F5: 
case 0x13F8: case 0x13F9: case 0x13FA: case 0x13FB: case 0x13FC: case 0x13FD: 
case 0x17D7: 
case 0x1843: 
case 0x1AA7: goto _13;
default: goto _25;
}
} else {
if( input < 0x1F00 ) {
if( input < 0x1D00 ) {
if     ( input < 0x1C78 )  goto _25;
else if( input < 0x1C7E )  goto _13;
else                       goto _25;
} else {
if     ( input < 0x1DC0 )  goto _15;
else if( input < 0x1E00 )  goto _11;
else                       goto _13;
}
} else {
switch( input ) {
case 0x1F16: case 0x1F17: 
case 0x1F1E: case 0x1F1F: 
case 0x1F46: case 0x1F47: goto _11;
default: goto _15;
}
}
}
} else {
switch( input ) {
case 0x1F4E: case 0x1F4F: 
case 0x1F58: 
case 0x1F5A: 
case 0x1F5C: 
case 0x1F5E: 
case 0x1F7E: case 0x1F7F: 
case 0x1FB5: 
case 0x1FBD: 
case 0x1FBF: case 0x1FC0: case 0x1FC1: 
case 0x1FC5: 
case 0x1FCD: case 0x1FCE: case 0x1FCF: goto _11;
default: goto _15;
}
}
} else {
switch( input ) {
case 0x1FD6: case 0x1FD7: case 0x1FD8: case 0x1FD9: case 0x1FDA: case 0x1FDB: 
case 0x1FE0: case 0x1FE1: case 0x1FE2: case 0x1FE3: case 0x1FE4: case 0x1FE5: case 0x1FE6: case 0x1FE7: 
case 0x1FE8: case 0x1FE9: case 0x1FEA: case 0x1FEB: case 0x1FEC: 
case 0x1FF2: case 0x1FF3: case 0x1FF4: 
case 0x1FF6: case 0x1FF7: case 0x1FF8: case 0x1FF9: case 0x1FFA: case 0x1FFB: case 0x1FFC: goto _15;
case 0x200B: case 0x200C: case 0x200D: case 0x200E: case 0x200F: 
case 0x2028: case 0x2029: case 0x202A: case 0x202B: case 0x202C: case 0x202D: case 0x202E: 
case 0x2060: case 0x2061: case 0x2062: case 0x2063: case 0x2064: 
case 0x2066: case 0x2067: 
case 0x2068: case 0x2069: case 0x206A: case 0x206B: case 0x206C: case 0x206D: case 0x206E: case 0x206F: 
case 0x2070: goto _25;
case 0x2071: goto _13;
case 0x2072: case 0x2073: case 0x2074: case 0x2075: case 0x2076: case 0x2077: 
case 0x2078: case 0x2079: case 0x207A: case 0x207B: case 0x207C: case 0x207D: case 0x207E: goto _25;
case 0x207F: goto _13;
case 0x2080: case 0x2081: case 0x2082: case 0x2083: case 0x2084: case 0x2085: case 0x2086: case 0x2087: 
case 0x2088: case 0x2089: case 0x208A: case 0x208B: case 0x208C: case 0x208D: case 0x208E: case 0x208F: goto _25;
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: goto _13;
case 0x209D: case 0x209E: case 0x209F: 
case 0x20D0: case 0x20D1: case 0x20D2: case 0x20D3: case 0x20D4: case 0x20D5: case 0x20D6: case 0x20D7: 
case 0x20D8: case 0x20D9: case 0x20DA: case 0x20DB: case 0x20DC: case 0x20DD: case 0x20DE: case 0x20DF: 
case 0x20E0: case 0x20E1: case 0x20E2: case 0x20E3: case 0x20E4: case 0x20E5: case 0x20E6: case 0x20E7: 
case 0x20E8: case 0x20E9: case 0x20EA: case 0x20EB: case 0x20EC: case 0x20ED: case 0x20EE: case 0x20EF: 
case 0x20F0: case 0x20F1: case 0x20F2: case 0x20F3: case 0x20F4: case 0x20F5: case 0x20F6: case 0x20F7: 
case 0x20F8: case 0x20F9: case 0x20FA: case 0x20FB: case 0x20FC: case 0x20FD: case 0x20FE: case 0x20FF: goto _25;
case 0x2102: 
case 0x2107: 
case 0x210A: case 0x210B: case 0x210C: case 0x210D: case 0x210E: case 0x210F: 
case 0x2110: case 0x2111: case 0x2112: case 0x2113: 
case 0x2115: 
case 0x2119: case 0x211A: case 0x211B: case 0x211C: case 0x211D: 
case 0x2124: 
case 0x2126: 
case 0x2128: 
case 0x212A: case 0x212B: case 0x212C: case 0x212D: 
case 0x212F: case 0x2130: case 0x2131: case 0x2132: case 0x2133: case 0x2134: 
case 0x2139: goto _15;
default: goto _11;
}
}
}
} else {
if( input < 0xFF21 ) {
if( input < 0x309F ) {
if( input < 0x2CEB ) {
if( input < 0x25A0 ) {
if( input < 0x214F ) {
if     ( input < 0x2140 )  goto _15;
else if( input < 0x2145 )  goto _11;
else if( input < 0x214A )  goto _15;
else if( input < 0x214E )  goto _11;
else                       goto _15;
} else {
if( input < 0x2185 ) {
if     ( input == 0x214F )  goto _11;
else if( input < 0x2183 )   goto _25;
else                        goto _13;
} else {
if     ( input < 0x2190 )  goto _25;
else if( input < 0x2400 )  goto _11;
else                       goto _25;
}
}
} else {
if( input < 0x2C2F ) {
if( input < 0x2800 ) {
if     ( input < 0x2700 )  goto _11;
else if( input < 0x27C0 )  goto _25;
else                       goto _11;
} else {
if     ( input < 0x2900 )  goto _25;
else if( input < 0x2C00 )  goto _11;
else                       goto _13;
}
} else {
switch( input ) {
case 0x2C2F: 
case 0x2C5F: goto _25;
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: goto _15;
case 0x2CE5: case 0x2CE6: case 0x2CE7: case 0x2CE8: case 0x2CE9: case 0x2CEA: goto _25;
default: goto _13;
}
}
}
} else {
switch( input ) {
case 0x2CEB: case 0x2CEC: case 0x2CED: case 0x2CEE: 
case 0x2CF2: case 0x2CF3: 
case 0x2D00: case 0x2D01: case 0x2D02: case 0x2D03: case 0x2D04: case 0x2D05: case 0x2D06: case 0x2D07: 
case 0x2D08: case 0x2D09: case 0x2D0A: case 0x2D0B: case 0x2D0C: case 0x2D0D: case 0x2D0E: case 0x2D0F: 
case 0x2D10: case 0x2D11: case 0x2D12: case 0x2D13: case 0x2D14: case 0x2D15: case 0x2D16: case 0x2D17: 
case 0x2D18: case 0x2D19: case 0x2D1A: case 0x2D1B: case 0x2D1C: case 0x2D1D: case 0x2D1E: case 0x2D1F: 
case 0x2D20: case 0x2D21: case 0x2D22: case 0x2D23: case 0x2D24: case 0x2D25: 
case 0x2D27: 
case 0x2D2D: 
case 0x2D6F: goto _13;
case 0x2E00: case 0x2E01: case 0x2E02: case 0x2E03: case 0x2E04: case 0x2E05: case 0x2E06: case 0x2E07: 
case 0x2E08: case 0x2E09: case 0x2E0A: case 0x2E0B: case 0x2E0C: case 0x2E0D: case 0x2E0E: case 0x2E0F: 
case 0x2E10: case 0x2E11: case 0x2E12: case 0x2E13: case 0x2E14: case 0x2E15: case 0x2E16: case 0x2E17: 
case 0x2E18: case 0x2E19: case 0x2E1A: case 0x2E1B: case 0x2E1C: case 0x2E1D: case 0x2E1E: case 0x2E1F: 
case 0x2E20: case 0x2E21: case 0x2E22: case 0x2E23: case 0x2E24: case 0x2E25: case 0x2E26: case 0x2E27: 
case 0x2E28: case 0x2E29: case 0x2E2A: case 0x2E2B: case 0x2E2C: case 0x2E2D: case 0x2E2E: goto _11;
case 0x2E2F: goto _15;
case 0x2E30: case 0x2E31: case 0x2E32: case 0x2E33: case 0x2E34: case 0x2E35: case 0x2E36: case 0x2E37: 
case 0x2E38: case 0x2E39: case 0x2E3A: case 0x2E3B: case 0x2E3C: case 0x2E3D: case 0x2E3E: case 0x2E3F: 
case 0x2E40: case 0x2E41: case 0x2E42: case 0x2E43: case 0x2E44: case 0x2E45: case 0x2E46: case 0x2E47: 
case 0x2E48: case 0x2E49: case 0x2E4A: case 0x2E4B: case 0x2E4C: case 0x2E4D: case 0x2E4E: case 0x2E4F: 
case 0x2E50: case 0x2E51: case 0x2E52: case 0x2E53: case 0x2E54: case 0x2E55: case 0x2E56: case 0x2E57: 
case 0x2E58: case 0x2E59: case 0x2E5A: case 0x2E5B: case 0x2E5C: case 0x2E5D: case 0x2E5E: case 0x2E5F: 
case 0x2E60: case 0x2E61: case 0x2E62: case 0x2E63: case 0x2E64: case 0x2E65: case 0x2E66: case 0x2E67: 
case 0x2E68: case 0x2E69: case 0x2E6A: case 0x2E6B: case 0x2E6C: case 0x2E6D: case 0x2E6E: case 0x2E6F: 
case 0x2E70: case 0x2E71: case 0x2E72: case 0x2E73: case 0x2E74: case 0x2E75: case 0x2E76: case 0x2E77: 
case 0x2E78: case 0x2E79: case 0x2E7A: case 0x2E7B: case 0x2E7C: case 0x2E7D: case 0x2E7E: case 0x2E7F: goto _11;
case 0x3005: 
case 0x3031: case 0x3032: case 0x3033: case 0x3034: case 0x3035: 
case 0x303B: 
case 0x309D: case 0x309E: goto _13;
default: goto _25;
}
}
} else {
if( input < 0xA7F8 ) {
if( input < 0xA67F ) {
switch( input ) {
case 0x30FC: case 0x30FD: case 0x30FE: 
case 0xA015: 
case 0xA4F8: case 0xA4F9: case 0xA4FA: case 0xA4FB: case 0xA4FC: case 0xA4FD: 
case 0xA60C: 
case 0xA640: case 0xA641: case 0xA642: case 0xA643: case 0xA644: case 0xA645: case 0xA646: case 0xA647: 
case 0xA648: case 0xA649: case 0xA64A: case 0xA64B: case 0xA64C: case 0xA64D: case 0xA64E: case 0xA64F: 
case 0xA650: case 0xA651: case 0xA652: case 0xA653: case 0xA654: case 0xA655: case 0xA656: case 0xA657: 
case 0xA658: case 0xA659: case 0xA65A: case 0xA65B: case 0xA65C: case 0xA65D: case 0xA65E: case 0xA65F: 
case 0xA660: case 0xA661: case 0xA662: case 0xA663: case 0xA664: case 0xA665: case 0xA666: case 0xA667: 
case 0xA668: case 0xA669: case 0xA66A: case 0xA66B: case 0xA66C: case 0xA66D: goto _13;
default: goto _25;
}
} else {
switch( input ) {
case 0xA67F: 
case 0xA680: case 0xA681: case 0xA682: case 0xA683: case 0xA684: case 0xA685: case 0xA686: case 0xA687: 
case 0xA688: case 0xA689: case 0xA68A: case 0xA68B: case 0xA68C: case 0xA68D: case 0xA68E: case 0xA68F: 
case 0xA690: case 0xA691: case 0xA692: case 0xA693: case 0xA694: case 0xA695: case 0xA696: case 0xA697: 
case 0xA698: case 0xA699: case 0xA69A: case 0xA69B: case 0xA69C: case 0xA69D: goto _13;
case 0xA69E: case 0xA69F: 
case 0xA6A0: case 0xA6A1: case 0xA6A2: case 0xA6A3: case 0xA6A4: case 0xA6A5: case 0xA6A6: case 0xA6A7: 
case 0xA6A8: case 0xA6A9: case 0xA6AA: case 0xA6AB: case 0xA6AC: case 0xA6AD: case 0xA6AE: case 0xA6AF: 
case 0xA6B0: case 0xA6B1: case 0xA6B2: case 0xA6B3: case 0xA6B4: case 0xA6B5: case 0xA6B6: case 0xA6B7: 
case 0xA6B8: case 0xA6B9: case 0xA6BA: case 0xA6BB: case 0xA6BC: case 0xA6BD: case 0xA6BE: case 0xA6BF: 
case 0xA6C0: case 0xA6C1: case 0xA6C2: case 0xA6C3: case 0xA6C4: case 0xA6C5: case 0xA6C6: case 0xA6C7: 
case 0xA6C8: case 0xA6C9: case 0xA6CA: case 0xA6CB: case 0xA6CC: case 0xA6CD: case 0xA6CE: case 0xA6CF: 
case 0xA6D0: case 0xA6D1: case 0xA6D2: case 0xA6D3: case 0xA6D4: case 0xA6D5: case 0xA6D6: case 0xA6D7: 
case 0xA6D8: case 0xA6D9: case 0xA6DA: case 0xA6DB: case 0xA6DC: case 0xA6DD: case 0xA6DE: case 0xA6DF: 
case 0xA6E0: case 0xA6E1: case 0xA6E2: case 0xA6E3: case 0xA6E4: case 0xA6E5: case 0xA6E6: case 0xA6E7: 
case 0xA6E8: case 0xA6E9: case 0xA6EA: case 0xA6EB: case 0xA6EC: case 0xA6ED: case 0xA6EE: case 0xA6EF: 
case 0xA6F0: case 0xA6F1: case 0xA6F2: case 0xA6F3: case 0xA6F4: case 0xA6F5: case 0xA6F6: case 0xA6F7: 
case 0xA6F8: case 0xA6F9: case 0xA6FA: case 0xA6FB: case 0xA6FC: case 0xA6FD: case 0xA6FE: case 0xA6FF: 
case 0xA700: case 0xA701: case 0xA702: case 0xA703: case 0xA704: case 0xA705: case 0xA706: case 0xA707: 
case 0xA708: case 0xA709: case 0xA70A: case 0xA70B: case 0xA70C: case 0xA70D: case 0xA70E: case 0xA70F: 
case 0xA710: case 0xA711: case 0xA712: case 0xA713: case 0xA714: case 0xA715: case 0xA716: goto _25;
case 0xA717: 
case 0xA718: case 0xA719: case 0xA71A: case 0xA71B: case 0xA71C: case 0xA71D: case 0xA71E: case 0xA71F: goto _13;
case 0xA720: case 0xA721: 
case 0xA789: case 0xA78A: 
case 0xA78F: 
case 0xA7AE: case 0xA7AF: 
case 0xA7B8: case 0xA7B9: case 0xA7BA: case 0xA7BB: case 0xA7BC: case 0xA7BD: case 0xA7BE: case 0xA7BF: 
case 0xA7C0: case 0xA7C1: case 0xA7C2: case 0xA7C3: case 0xA7C4: case 0xA7C5: case 0xA7C6: case 0xA7C7: 
case 0xA7C8: case 0xA7C9: case 0xA7CA: case 0xA7CB: case 0xA7CC: case 0xA7CD: case 0xA7CE: case 0xA7CF: 
case 0xA7D0: case 0xA7D1: case 0xA7D2: case 0xA7D3: case 0xA7D4: case 0xA7D5: case 0xA7D6: case 0xA7D7: 
case 0xA7D8: case 0xA7D9: case 0xA7DA: case 0xA7DB: case 0xA7DC: case 0xA7DD: case 0xA7DE: case 0xA7DF: 
case 0xA7E0: case 0xA7E1: case 0xA7E2: case 0xA7E3: case 0xA7E4: case 0xA7E5: case 0xA7E6: case 0xA7E7: 
case 0xA7E8: case 0xA7E9: case 0xA7EA: case 0xA7EB: case 0xA7EC: case 0xA7ED: case 0xA7EE: case 0xA7EF: 
case 0xA7F0: case 0xA7F1: case 0xA7F2: case 0xA7F3: case 0xA7F4: case 0xA7F5: case 0xA7F6: case 0xA7F7: goto _11;
default: goto _15;
}
}
} else {
switch( input ) {
case 0xA7F8: case 0xA7F9: case 0xA7FA: goto _15;
case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: goto _11;
case 0xA9CF: 
case 0xA9E6: 
case 0xAA70: 
case 0xAADD: 
case 0xAAF3: case 0xAAF4: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: case 0xAB65: 
case 0xAB70: case 0xAB71: case 0xAB72: case 0xAB73: case 0xAB74: case 0xAB75: case 0xAB76: case 0xAB77: 
case 0xAB78: case 0xAB79: case 0xAB7A: case 0xAB7B: case 0xAB7C: case 0xAB7D: case 0xAB7E: case 0xAB7F: 
case 0xAB80: case 0xAB81: case 0xAB82: case 0xAB83: case 0xAB84: case 0xAB85: case 0xAB86: case 0xAB87: 
case 0xAB88: case 0xAB89: case 0xAB8A: case 0xAB8B: case 0xAB8C: case 0xAB8D: case 0xAB8E: case 0xAB8F: 
case 0xAB90: case 0xAB91: case 0xAB92: case 0xAB93: case 0xAB94: case 0xAB95: case 0xAB96: case 0xAB97: 
case 0xAB98: case 0xAB99: case 0xAB9A: case 0xAB9B: case 0xAB9C: case 0xAB9D: case 0xAB9E: case 0xAB9F: 
case 0xABA0: case 0xABA1: case 0xABA2: case 0xABA3: case 0xABA4: case 0xABA5: case 0xABA6: case 0xABA7: 
case 0xABA8: case 0xABA9: case 0xABAA: case 0xABAB: case 0xABAC: case 0xABAD: case 0xABAE: case 0xABAF: 
case 0xABB0: case 0xABB1: case 0xABB2: case 0xABB3: case 0xABB4: case 0xABB5: case 0xABB6: case 0xABB7: 
case 0xABB8: case 0xABB9: case 0xABBA: case 0xABBB: case 0xABBC: case 0xABBD: case 0xABBE: case 0xABBF: goto _13;
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: goto _15;
case 0xFB07: 
case 0xFB08: case 0xFB09: case 0xFB0A: case 0xFB0B: case 0xFB0C: case 0xFB0D: case 0xFB0E: case 0xFB0F: 
case 0xFB10: case 0xFB11: case 0xFB12: goto _11;
case 0xFB13: case 0xFB14: case 0xFB15: case 0xFB16: case 0xFB17: goto _15;
case 0xFB18: case 0xFB19: case 0xFB1A: case 0xFB1B: case 0xFB1C: case 0xFB1D: case 0xFB1E: case 0xFB1F: 
case 0xFB20: case 0xFB21: case 0xFB22: case 0xFB23: case 0xFB24: case 0xFB25: case 0xFB26: case 0xFB27: 
case 0xFB28: case 0xFB29: case 0xFB2A: case 0xFB2B: case 0xFB2C: case 0xFB2D: case 0xFB2E: case 0xFB2F: 
case 0xFB30: case 0xFB31: case 0xFB32: case 0xFB33: case 0xFB34: case 0xFB35: case 0xFB36: case 0xFB37: 
case 0xFB38: case 0xFB39: case 0xFB3A: case 0xFB3B: case 0xFB3C: case 0xFB3D: case 0xFB3E: case 0xFB3F: 
case 0xFB40: case 0xFB41: case 0xFB42: case 0xFB43: case 0xFB44: case 0xFB45: case 0xFB46: case 0xFB47: 
case 0xFB48: case 0xFB49: case 0xFB4A: case 0xFB4B: case 0xFB4C: case 0xFB4D: case 0xFB4E: case 0xFB4F: goto _11;
default: goto _25;
}
}
}
} else {
if( input < 0x1D4BD ) {
if( input < 0x16B44 ) {
if( input < 0x10000 ) {
switch( input ) {
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: 
case 0xFF70: 
case 0xFF9E: case 0xFF9F: goto _13;
case 0xFFF0: case 0xFFF1: case 0xFFF2: case 0xFFF3: case 0xFFF4: case 0xFFF5: case 0xFFF6: case 0xFFF7: 
case 0xFFF8: 
case 0xFFFC: case 0xFFFD: case 0xFFFE: case 0xFFFF: goto _11;
default: goto _25;
}
} else {
if( input < 0x10CB3 ) {
switch( input ) {
case 0x10140: case 0x10141: case 0x10142: case 0x10143: case 0x10144: case 0x10145: case 0x10146: case 0x10147: 
case 0x10148: case 0x10149: case 0x1014A: case 0x1014B: case 0x1014C: case 0x1014D: case 0x1014E: case 0x1014F: 
case 0x10150: case 0x10151: case 0x10152: case 0x10153: case 0x10154: case 0x10155: case 0x10156: case 0x10157: 
case 0x10158: case 0x10159: case 0x1015A: case 0x1015B: case 0x1015C: case 0x1015D: case 0x1015E: case 0x1015F: 
case 0x10160: case 0x10161: case 0x10162: case 0x10163: case 0x10164: case 0x10165: case 0x10166: case 0x10167: 
case 0x10168: case 0x10169: case 0x1016A: case 0x1016B: case 0x1016C: case 0x1016D: case 0x1016E: case 0x1016F: 
case 0x10170: case 0x10171: case 0x10172: case 0x10173: case 0x10174: case 0x10175: case 0x10176: case 0x10177: 
case 0x10178: case 0x10179: case 0x1017A: case 0x1017B: case 0x1017C: case 0x1017D: case 0x1017E: case 0x1017F: 
case 0x10180: case 0x10181: case 0x10182: case 0x10183: case 0x10184: case 0x10185: case 0x10186: case 0x10187: 
case 0x10188: case 0x10189: case 0x1018A: case 0x1018B: case 0x1018C: case 0x1018D: case 0x1018E: case 0x1018F: goto _11;
case 0x10400: case 0x10401: case 0x10402: case 0x10403: case 0x10404: case 0x10405: case 0x10406: case 0x10407: 
case 0x10408: case 0x10409: case 0x1040A: case 0x1040B: case 0x1040C: case 0x1040D: case 0x1040E: case 0x1040F: 
case 0x10410: case 0x10411: case 0x10412: case 0x10413: case 0x10414: case 0x10415: case 0x10416: case 0x10417: 
case 0x10418: case 0x10419: case 0x1041A: case 0x1041B: case 0x1041C: case 0x1041D: case 0x1041E: case 0x1041F: 
case 0x10420: case 0x10421: case 0x10422: case 0x10423: case 0x10424: case 0x10425: case 0x10426: case 0x10427: 
case 0x10428: case 0x10429: case 0x1042A: case 0x1042B: case 0x1042C: case 0x1042D: case 0x1042E: case 0x1042F: 
case 0x10430: case 0x10431: case 0x10432: case 0x10433: case 0x10434: case 0x10435: case 0x10436: case 0x10437: 
case 0x10438: case 0x10439: case 0x1043A: case 0x1043B: case 0x1043C: case 0x1043D: case 0x1043E: case 0x1043F: 
case 0x10440: case 0x10441: case 0x10442: case 0x10443: case 0x10444: case 0x10445: case 0x10446: case 0x10447: 
case 0x10448: case 0x10449: case 0x1044A: case 0x1044B: case 0x1044C: case 0x1044D: case 0x1044E: case 0x1044F: 
case 0x10C80: case 0x10C81: case 0x10C82: case 0x10C83: case 0x10C84: case 0x10C85: case 0x10C86: case 0x10C87: 
case 0x10C88: case 0x10C89: case 0x10C8A: case 0x10C8B: case 0x10C8C: case 0x10C8D: case 0x10C8E: case 0x10C8F: 
case 0x10C90: case 0x10C91: case 0x10C92: case 0x10C93: case 0x10C94: case 0x10C95: case 0x10C96: case 0x10C97: 
case 0x10C98: case 0x10C99: case 0x10C9A: case 0x10C9B: case 0x10C9C: case 0x10C9D: case 0x10C9E: case 0x10C9F: 
case 0x10CA0: case 0x10CA1: case 0x10CA2: case 0x10CA3: case 0x10CA4: case 0x10CA5: case 0x10CA6: case 0x10CA7: 
case 0x10CA8: case 0x10CA9: case 0x10CAA: case 0x10CAB: case 0x10CAC: case 0x10CAD: case 0x10CAE: case 0x10CAF: 
case 0x10CB0: case 0x10CB1: case 0x10CB2: goto _13;
default: goto _25;
}
} else {
switch( input ) {
case 0x10CC0: case 0x10CC1: case 0x10CC2: case 0x10CC3: case 0x10CC4: case 0x10CC5: case 0x10CC6: case 0x10CC7: 
case 0x10CC8: case 0x10CC9: case 0x10CCA: case 0x10CCB: case 0x10CCC: case 0x10CCD: case 0x10CCE: case 0x10CCF: 
case 0x10CD0: case 0x10CD1: case 0x10CD2: case 0x10CD3: case 0x10CD4: case 0x10CD5: case 0x10CD6: case 0x10CD7: 
case 0x10CD8: case 0x10CD9: case 0x10CDA: case 0x10CDB: case 0x10CDC: case 0x10CDD: case 0x10CDE: case 0x10CDF: 
case 0x10CE0: case 0x10CE1: case 0x10CE2: case 0x10CE3: case 0x10CE4: case 0x10CE5: case 0x10CE6: case 0x10CE7: 
case 0x10CE8: case 0x10CE9: case 0x10CEA: case 0x10CEB: case 0x10CEC: case 0x10CED: case 0x10CEE: case 0x10CEF: 
case 0x10CF0: case 0x10CF1: case 0x10CF2: 
case 0x118A0: case 0x118A1: case 0x118A2: case 0x118A3: case 0x118A4: case 0x118A5: case 0x118A6: case 0x118A7: 
case 0x118A8: case 0x118A9: case 0x118AA: case 0x118AB: case 0x118AC: case 0x118AD: case 0x118AE: case 0x118AF: 
case 0x118B0: case 0x118B1: case 0x118B2: case 0x118B3: case 0x118B4: case 0x118B5: case 0x118B6: case 0x118B7: 
case 0x118B8: case 0x118B9: case 0x118BA: case 0x118BB: case 0x118BC: case 0x118BD: case 0x118BE: case 0x118BF: 
case 0x118C0: case 0x118C1: case 0x118C2: case 0x118C3: case 0x118C4: case 0x118C5: case 0x118C6: case 0x118C7: 
case 0x118C8: case 0x118C9: case 0x118CA: case 0x118CB: case 0x118CC: case 0x118CD: case 0x118CE: case 0x118CF: 
case 0x118D0: case 0x118D1: case 0x118D2: case 0x118D3: case 0x118D4: case 0x118D5: case 0x118D6: case 0x118D7: 
case 0x118D8: case 0x118D9: case 0x118DA: case 0x118DB: case 0x118DC: case 0x118DD: case 0x118DE: case 0x118DF: 
case 0x16B40: case 0x16B41: case 0x16B42: case 0x16B43: goto _13;
default: goto _25;
}
}
}
} else {
if( input < 0x1D49E ) {
if( input < 0x1D17B ) {
if     ( input < 0x16F93 )  goto _25;
else if( input < 0x16FA0 )  goto _13;
else if( input < 0x1D100 )  goto _25;
else if( input < 0x1D173 )  goto _11;
else                        goto _25;
} else {
if( input < 0x1D455 ) {
if     ( input < 0x1D200 )  goto _11;
else if( input < 0x1D400 )  goto _25;
else                        goto _15;
} else {
if     ( input == 0x1D455 )  goto _11;
else if( input == 0x1D49D )  goto _11;
else                         goto _15;
}
}
} else {
switch( input ) {
case 0x1D4A0: case 0x1D4A1: 
case 0x1D4A3: case 0x1D4A4: 
case 0x1D4A7: case 0x1D4A8: 
case 0x1D4AD: 
case 0x1D4BA: 
case 0x1D4BC: goto _11;
default: goto _15;
}
}
}
} else {
if( input < 0x1D6C1 ) {
switch( input ) {
case 0x1D4C4: 
case 0x1D506: 
case 0x1D50B: case 0x1D50C: 
case 0x1D515: 
case 0x1D51D: 
case 0x1D53A: 
case 0x1D53F: 
case 0x1D545: 
case 0x1D547: case 0x1D548: case 0x1D549: 
case 0x1D551: 
case 0x1D6A6: case 0x1D6A7: goto _11;
default: goto _15;
}
} else {
if( input < 0x1D76F ) {
switch( input ) {
case 0x1D6C1: 
case 0x1D6DB: 
case 0x1D6FB: 
case 0x1D715: 
case 0x1D735: 
case 0x1D74F: goto _11;
default: goto _15;
}
} else {
if( input < 0x1D7C3 ) {
switch( input ) {
case 0x1D76F: 
case 0x1D789: 
case 0x1D7A9: goto _11;
default: goto _15;
}
} else {
if( input < 0x1D800 ) {
if     ( input == 0x1D7C3 )  goto _11;
else if( input < 0x1D7CC )   goto _15;
else                         goto _11;
} else {
if     ( input < 0x1F600 )  goto _25;
else if( input < 0x1F916 )  goto _11;
else                        goto _25;
}
}
}
}
}
}
}


    __quex_assert_no_passage();
_11:
    /* (297382 from 297380) (297382 from 297382)  */
    goto _57;


    __quex_assert_no_passage();
_32:
    /* (297382 from RELOAD_FORWARD)  */
    goto _58;


    __quex_assert_no_passage();
_13:
    /* (297383 from 297382) (297383 from 297384) (297383 from 297385)  */

    position[0] = me->buffer._read_p; __quex_debug("position[0] = input_p;\n");

_61:
    ++(me->buffer._read_p);

_62:
    input = *(me->buffer._read_p);


    __quex_debug_state(297383);
switch( input ) {
case 0x0: goto _35;
case 0x2D: goto _22;
case 0x300: case 0x301: case 0x302: case 0x303: case 0x304: case 0x305: case 0x306: case 0x307: 
case 0x308: case 0x309: case 0x30A: case 0x30B: case 0x30C: case 0x30D: case 0x30E: case 0x30F: 
case 0x310: case 0x311: case 0x312: case 0x313: case 0x314: case 0x315: case 0x316: case 0x317: 
case 0x318: case 0x319: case 0x31A: case 0x31B: case 0x31C: case 0x31D: case 0x31E: case 0x31F: 
case 0x320: case 0x321: case 0x322: case 0x323: case 0x324: case 0x325: case 0x326: case 0x327: 
case 0x328: case 0x329: case 0x32A: case 0x32B: case 0x32C: case 0x32D: case 0x32E: case 0x32F: 
case 0x330: case 0x331: case 0x332: case 0x333: case 0x334: case 0x335: case 0x336: case 0x337: 
case 0x338: case 0x339: case 0x33A: case 0x33B: case 0x33C: case 0x33D: case 0x33E: case 0x33F: 
case 0x340: case 0x341: case 0x342: case 0x343: case 0x344: case 0x345: case 0x346: case 0x347: 
case 0x348: case 0x349: case 0x34A: case 0x34B: case 0x34C: case 0x34D: case 0x34E: case 0x34F: 
case 0x350: case 0x351: case 0x352: case 0x353: case 0x354: case 0x355: case 0x356: case 0x357: 
case 0x358: case 0x359: case 0x35A: case 0x35B: case 0x35C: case 0x35D: case 0x35E: case 0x35F: 
case 0x360: case 0x361: case 0x362: case 0x363: case 0x364: case 0x365: case 0x366: case 0x367: 
case 0x368: case 0x369: case 0x36A: case 0x36B: case 0x36C: case 0x36D: case 0x36E: case 0x36F: goto _14;
default: goto _26;
}


    __quex_assert_no_passage();
_14:
    /* (297383 from 297383)  */
    goto _61;


    __quex_assert_no_passage();
_34:
    /* (297383 from RELOAD_FORWARD)  */
    goto _62;


    __quex_assert_no_passage();
_15:
    /* (297384 from 297385) (297384 from 297382)  */

    position[0] = me->buffer._read_p; __quex_debug("position[0] = input_p;\n");

_65:
    ++(me->buffer._read_p);

    { last_acceptance = 1722; __quex_debug("last_acceptance = 1722\n"); }

_66:
    input = *(me->buffer._read_p);


    __quex_debug_state(297384);
if( input < 0x213A ) {
if( input < 0x10CE ) {
if( input < 0x37F ) {
if( input < 0x1BB ) {
if( input < 0x7B ) {
switch( input ) {
case 0x0: goto _37;
case 0x9: 
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: goto _12;
case 0x2D: goto _17;
case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: goto _12;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: goto _16;
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: goto _12;
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: goto _16;
default: goto _25;
}
} else {
switch( input ) {
case 0x7B: case 0x7C: case 0x7D: case 0x7E: goto _12;
case 0x7F: 
case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: case 0x85: case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: goto _25;
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: case 0xAA: case 0xAB: case 0xAC: goto _12;
case 0xAD: goto _25;
case 0xAE: case 0xAF: case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: 
case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: case 0xBA: case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: goto _12;
default: goto _16;
}
}
} else {
switch( input ) {
case 0x1BB: 
case 0x1C0: case 0x1C1: case 0x1C2: case 0x1C3: goto _12;
case 0x250: case 0x251: case 0x252: case 0x253: case 0x254: case 0x255: case 0x256: case 0x257: 
case 0x258: case 0x259: case 0x25A: case 0x25B: case 0x25C: case 0x25D: case 0x25E: case 0x25F: 
case 0x260: case 0x261: case 0x262: case 0x263: case 0x264: case 0x265: case 0x266: case 0x267: 
case 0x268: case 0x269: case 0x26A: case 0x26B: case 0x26C: case 0x26D: case 0x26E: case 0x26F: 
case 0x270: case 0x271: case 0x272: case 0x273: case 0x274: case 0x275: case 0x276: case 0x277: 
case 0x278: case 0x279: case 0x27A: case 0x27B: case 0x27C: case 0x27D: case 0x27E: case 0x27F: 
case 0x280: case 0x281: case 0x282: case 0x283: case 0x284: case 0x285: case 0x286: case 0x287: 
case 0x288: case 0x289: case 0x28A: case 0x28B: case 0x28C: case 0x28D: case 0x28E: case 0x28F: 
case 0x290: case 0x291: case 0x292: case 0x293: goto _13;
case 0x294: goto _25;
case 0x295: case 0x296: case 0x297: 
case 0x298: case 0x299: case 0x29A: case 0x29B: case 0x29C: case 0x29D: case 0x29E: case 0x29F: 
case 0x2A0: case 0x2A1: case 0x2A2: case 0x2A3: case 0x2A4: case 0x2A5: case 0x2A6: case 0x2A7: 
case 0x2A8: case 0x2A9: case 0x2AA: case 0x2AB: case 0x2AC: case 0x2AD: case 0x2AE: case 0x2AF: goto _13;
case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: 
case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: 
case 0x2E5: case 0x2E6: case 0x2E7: case 0x2E8: case 0x2E9: case 0x2EA: case 0x2EB: 
case 0x2ED: 
case 0x2EF: 
case 0x2F0: case 0x2F1: case 0x2F2: case 0x2F3: case 0x2F4: case 0x2F5: case 0x2F6: case 0x2F7: 
case 0x2F8: case 0x2F9: case 0x2FA: case 0x2FB: case 0x2FC: case 0x2FD: case 0x2FE: case 0x2FF: 
case 0x375: 
case 0x378: case 0x379: 
case 0x37E: goto _12;
default: goto _16;
}
}
} else {
if( input < 0x641 ) {
if( input < 0x3F6 ) {
switch( input ) {
case 0x380: case 0x381: case 0x382: case 0x383: case 0x384: case 0x385: 
case 0x387: 
case 0x38B: 
case 0x38D: 
case 0x3A2: goto _12;
default: goto _16;
}
} else {
if( input < 0x557 ) {
switch( input ) {
case 0x3F6: 
case 0x482: case 0x483: case 0x484: case 0x485: case 0x486: case 0x487: case 0x488: case 0x489: goto _12;
case 0x530: goto _25;
case 0x531: case 0x532: case 0x533: case 0x534: case 0x535: case 0x536: case 0x537: 
case 0x538: case 0x539: case 0x53A: case 0x53B: case 0x53C: case 0x53D: case 0x53E: case 0x53F: 
case 0x540: case 0x541: case 0x542: case 0x543: case 0x544: case 0x545: case 0x546: case 0x547: 
case 0x548: case 0x549: case 0x54A: case 0x54B: case 0x54C: case 0x54D: case 0x54E: case 0x54F: 
case 0x550: case 0x551: case 0x552: case 0x553: case 0x554: case 0x555: case 0x556: goto _13;
default: goto _16;
}
} else {
switch( input ) {
case 0x559: 
case 0x561: case 0x562: case 0x563: case 0x564: case 0x565: case 0x566: case 0x567: 
case 0x568: case 0x569: case 0x56A: case 0x56B: case 0x56C: case 0x56D: case 0x56E: case 0x56F: 
case 0x570: case 0x571: case 0x572: case 0x573: case 0x574: case 0x575: case 0x576: case 0x577: 
case 0x578: case 0x579: case 0x57A: case 0x57B: case 0x57C: case 0x57D: case 0x57E: case 0x57F: 
case 0x580: case 0x581: case 0x582: case 0x583: case 0x584: case 0x585: case 0x586: case 0x587: 
case 0x640: goto _13;
default: goto _25;
}
}
}
} else {
switch( input ) {
case 0x6E5: case 0x6E6: 
case 0x7F4: case 0x7F5: 
case 0x7FA: 
case 0x81A: 
case 0x824: 
case 0x828: 
case 0x971: 
case 0xE46: 
case 0xEC6: 
case 0x10A0: case 0x10A1: case 0x10A2: case 0x10A3: case 0x10A4: case 0x10A5: case 0x10A6: case 0x10A7: 
case 0x10A8: case 0x10A9: case 0x10AA: case 0x10AB: case 0x10AC: case 0x10AD: case 0x10AE: case 0x10AF: 
case 0x10B0: case 0x10B1: case 0x10B2: case 0x10B3: case 0x10B4: case 0x10B5: case 0x10B6: case 0x10B7: 
case 0x10B8: case 0x10B9: case 0x10BA: case 0x10BB: case 0x10BC: case 0x10BD: case 0x10BE: case 0x10BF: 
case 0x10C0: case 0x10C1: case 0x10C2: case 0x10C3: case 0x10C4: case 0x10C5: 
case 0x10C7: 
case 0x10CD: goto _13;
default: goto _25;
}
}
}
} else {
if( input < 0x1FD0 ) {
if( input < 0x1F46 ) {
if( input < 0x1AA7 ) {
switch( input ) {
case 0x10FC: 
case 0x13A0: case 0x13A1: case 0x13A2: case 0x13A3: case 0x13A4: case 0x13A5: case 0x13A6: case 0x13A7: 
case 0x13A8: case 0x13A9: case 0x13AA: case 0x13AB: case 0x13AC: case 0x13AD: case 0x13AE: case 0x13AF: 
case 0x13B0: case 0x13B1: case 0x13B2: case 0x13B3: case 0x13B4: case 0x13B5: case 0x13B6: case 0x13B7: 
case 0x13B8: case 0x13B9: case 0x13BA: case 0x13BB: case 0x13BC: case 0x13BD: case 0x13BE: case 0x13BF: 
case 0x13C0: case 0x13C1: case 0x13C2: case 0x13C3: case 0x13C4: case 0x13C5: case 0x13C6: case 0x13C7: 
case 0x13C8: case 0x13C9: case 0x13CA: case 0x13CB: case 0x13CC: case 0x13CD: case 0x13CE: case 0x13CF: 
case 0x13D0: case 0x13D1: case 0x13D2: case 0x13D3: case 0x13D4: case 0x13D5: case 0x13D6: case 0x13D7: 
case 0x13D8: case 0x13D9: case 0x13DA: case 0x13DB: case 0x13DC: case 0x13DD: case 0x13DE: case 0x13DF: 
case 0x13E0: case 0x13E1: case 0x13E2: case 0x13E3: case 0x13E4: case 0x13E5: case 0x13E6: case 0x13E7: 
case 0x13E8: case 0x13E9: case 0x13EA: case 0x13EB: case 0x13EC: case 0x13ED: case 0x13EE: case 0x13EF: 
case 0x13F0: case 0x13F1: case 0x13F2: case 0x13F3: case 0x13F4: case 0x13F5: 
case 0x13F8: case 0x13F9: case 0x13FA: case 0x13FB: case 0x13FC: case 0x13FD: 
case 0x17D7: 
case 0x1843: goto _13;
default: goto _25;
}
} else {
if( input < 0x1E00 ) {
if( input < 0x1C7E ) {
if     ( input == 0x1AA7 )  goto _13;
else if( input < 0x1C78 )   goto _25;
else                        goto _13;
} else {
if     ( input < 0x1D00 )  goto _25;
else if( input < 0x1DC0 )  goto _16;
else                       goto _12;
}
} else {
switch( input ) {
case 0x1F00: case 0x1F01: case 0x1F02: case 0x1F03: case 0x1F04: case 0x1F05: case 0x1F06: case 0x1F07: 
case 0x1F08: case 0x1F09: case 0x1F0A: case 0x1F0B: case 0x1F0C: case 0x1F0D: case 0x1F0E: case 0x1F0F: 
case 0x1F10: case 0x1F11: case 0x1F12: case 0x1F13: case 0x1F14: case 0x1F15: goto _16;
case 0x1F16: case 0x1F17: goto _12;
case 0x1F18: case 0x1F19: case 0x1F1A: case 0x1F1B: case 0x1F1C: case 0x1F1D: goto _16;
case 0x1F1E: case 0x1F1F: goto _12;
case 0x1F20: case 0x1F21: case 0x1F22: case 0x1F23: case 0x1F24: case 0x1F25: case 0x1F26: case 0x1F27: 
case 0x1F28: case 0x1F29: case 0x1F2A: case 0x1F2B: case 0x1F2C: case 0x1F2D: case 0x1F2E: case 0x1F2F: 
case 0x1F30: case 0x1F31: case 0x1F32: case 0x1F33: case 0x1F34: case 0x1F35: case 0x1F36: case 0x1F37: 
case 0x1F38: case 0x1F39: case 0x1F3A: case 0x1F3B: case 0x1F3C: case 0x1F3D: case 0x1F3E: case 0x1F3F: 
case 0x1F40: case 0x1F41: case 0x1F42: case 0x1F43: case 0x1F44: case 0x1F45: goto _16;
default: goto _13;
}
}
}
} else {
switch( input ) {
case 0x1F46: case 0x1F47: 
case 0x1F4E: case 0x1F4F: 
case 0x1F58: 
case 0x1F5A: 
case 0x1F5C: 
case 0x1F5E: 
case 0x1F7E: case 0x1F7F: 
case 0x1FB5: 
case 0x1FBD: 
case 0x1FBF: case 0x1FC0: case 0x1FC1: 
case 0x1FC5: 
case 0x1FCD: case 0x1FCE: case 0x1FCF: goto _12;
default: goto _16;
}
}
} else {
switch( input ) {
case 0x1FD0: case 0x1FD1: case 0x1FD2: case 0x1FD3: 
case 0x1FD6: case 0x1FD7: case 0x1FD8: case 0x1FD9: case 0x1FDA: case 0x1FDB: 
case 0x1FE0: case 0x1FE1: case 0x1FE2: case 0x1FE3: case 0x1FE4: case 0x1FE5: case 0x1FE6: case 0x1FE7: 
case 0x1FE8: case 0x1FE9: case 0x1FEA: case 0x1FEB: case 0x1FEC: 
case 0x1FF2: case 0x1FF3: case 0x1FF4: 
case 0x1FF6: case 0x1FF7: case 0x1FF8: case 0x1FF9: case 0x1FFA: case 0x1FFB: case 0x1FFC: goto _16;
case 0x200B: case 0x200C: case 0x200D: case 0x200E: case 0x200F: 
case 0x2028: case 0x2029: case 0x202A: case 0x202B: case 0x202C: case 0x202D: case 0x202E: 
case 0x2060: case 0x2061: case 0x2062: case 0x2063: case 0x2064: 
case 0x2066: case 0x2067: 
case 0x2068: case 0x2069: case 0x206A: case 0x206B: case 0x206C: case 0x206D: case 0x206E: case 0x206F: 
case 0x2070: goto _25;
case 0x2071: goto _13;
case 0x2072: case 0x2073: case 0x2074: case 0x2075: case 0x2076: case 0x2077: 
case 0x2078: case 0x2079: case 0x207A: case 0x207B: case 0x207C: case 0x207D: case 0x207E: goto _25;
case 0x207F: goto _13;
case 0x2080: case 0x2081: case 0x2082: case 0x2083: case 0x2084: case 0x2085: case 0x2086: case 0x2087: 
case 0x2088: case 0x2089: case 0x208A: case 0x208B: case 0x208C: case 0x208D: case 0x208E: case 0x208F: goto _25;
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: goto _13;
case 0x209D: case 0x209E: case 0x209F: 
case 0x20D0: case 0x20D1: case 0x20D2: case 0x20D3: case 0x20D4: case 0x20D5: case 0x20D6: case 0x20D7: 
case 0x20D8: case 0x20D9: case 0x20DA: case 0x20DB: case 0x20DC: case 0x20DD: case 0x20DE: case 0x20DF: 
case 0x20E0: case 0x20E1: case 0x20E2: case 0x20E3: case 0x20E4: case 0x20E5: case 0x20E6: case 0x20E7: 
case 0x20E8: case 0x20E9: case 0x20EA: case 0x20EB: case 0x20EC: case 0x20ED: case 0x20EE: case 0x20EF: 
case 0x20F0: case 0x20F1: case 0x20F2: case 0x20F3: case 0x20F4: case 0x20F5: case 0x20F6: case 0x20F7: 
case 0x20F8: case 0x20F9: case 0x20FA: case 0x20FB: case 0x20FC: case 0x20FD: case 0x20FE: case 0x20FF: goto _25;
case 0x2102: 
case 0x2107: 
case 0x210A: case 0x210B: case 0x210C: case 0x210D: case 0x210E: case 0x210F: 
case 0x2110: case 0x2111: case 0x2112: case 0x2113: 
case 0x2115: 
case 0x2119: case 0x211A: case 0x211B: case 0x211C: case 0x211D: 
case 0x2124: 
case 0x2126: 
case 0x2128: 
case 0x212A: case 0x212B: case 0x212C: case 0x212D: 
case 0x212F: case 0x2130: case 0x2131: case 0x2132: case 0x2133: case 0x2134: 
case 0x2139: goto _16;
default: goto _12;
}
}
}
} else {
if( input < 0xFB50 ) {
if( input < 0x309D ) {
if( input < 0x2CE5 ) {
if( input < 0x2400 ) {
switch( input ) {
case 0x213C: case 0x213D: case 0x213E: case 0x213F: 
case 0x2145: case 0x2146: case 0x2147: case 0x2148: case 0x2149: 
case 0x214E: goto _16;
case 0x2150: case 0x2151: case 0x2152: case 0x2153: case 0x2154: case 0x2155: case 0x2156: case 0x2157: 
case 0x2158: case 0x2159: case 0x215A: case 0x215B: case 0x215C: case 0x215D: case 0x215E: case 0x215F: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: goto _25;
case 0x2183: case 0x2184: goto _13;
case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: case 0x2189: case 0x218A: case 0x218B: case 0x218C: case 0x218D: case 0x218E: case 0x218F: goto _25;
default: goto _12;
}
} else {
if( input < 0x2C00 ) {
if( input < 0x27C0 ) {
if     ( input < 0x25A0 )  goto _25;
else if( input < 0x2700 )  goto _12;
else                       goto _25;
} else {
if     ( input < 0x2800 )  goto _12;
else if( input < 0x2900 )  goto _25;
else                       goto _12;
}
} else {
switch( input ) {
case 0x2C2F: 
case 0x2C5F: goto _25;
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: goto _16;
default: goto _13;
}
}
}
} else {
switch( input ) {
case 0x2CEB: case 0x2CEC: case 0x2CED: case 0x2CEE: 
case 0x2CF2: case 0x2CF3: 
case 0x2D00: case 0x2D01: case 0x2D02: case 0x2D03: case 0x2D04: case 0x2D05: case 0x2D06: case 0x2D07: 
case 0x2D08: case 0x2D09: case 0x2D0A: case 0x2D0B: case 0x2D0C: case 0x2D0D: case 0x2D0E: case 0x2D0F: 
case 0x2D10: case 0x2D11: case 0x2D12: case 0x2D13: case 0x2D14: case 0x2D15: case 0x2D16: case 0x2D17: 
case 0x2D18: case 0x2D19: case 0x2D1A: case 0x2D1B: case 0x2D1C: case 0x2D1D: case 0x2D1E: case 0x2D1F: 
case 0x2D20: case 0x2D21: case 0x2D22: case 0x2D23: case 0x2D24: case 0x2D25: 
case 0x2D27: 
case 0x2D2D: 
case 0x2D6F: goto _13;
case 0x2E00: case 0x2E01: case 0x2E02: case 0x2E03: case 0x2E04: case 0x2E05: case 0x2E06: case 0x2E07: 
case 0x2E08: case 0x2E09: case 0x2E0A: case 0x2E0B: case 0x2E0C: case 0x2E0D: case 0x2E0E: case 0x2E0F: 
case 0x2E10: case 0x2E11: case 0x2E12: case 0x2E13: case 0x2E14: case 0x2E15: case 0x2E16: case 0x2E17: 
case 0x2E18: case 0x2E19: case 0x2E1A: case 0x2E1B: case 0x2E1C: case 0x2E1D: case 0x2E1E: case 0x2E1F: 
case 0x2E20: case 0x2E21: case 0x2E22: case 0x2E23: case 0x2E24: case 0x2E25: case 0x2E26: case 0x2E27: 
case 0x2E28: case 0x2E29: case 0x2E2A: case 0x2E2B: case 0x2E2C: case 0x2E2D: case 0x2E2E: goto _12;
case 0x2E2F: goto _16;
case 0x2E30: case 0x2E31: case 0x2E32: case 0x2E33: case 0x2E34: case 0x2E35: case 0x2E36: case 0x2E37: 
case 0x2E38: case 0x2E39: case 0x2E3A: case 0x2E3B: case 0x2E3C: case 0x2E3D: case 0x2E3E: case 0x2E3F: 
case 0x2E40: case 0x2E41: case 0x2E42: case 0x2E43: case 0x2E44: case 0x2E45: case 0x2E46: case 0x2E47: 
case 0x2E48: case 0x2E49: case 0x2E4A: case 0x2E4B: case 0x2E4C: case 0x2E4D: case 0x2E4E: case 0x2E4F: 
case 0x2E50: case 0x2E51: case 0x2E52: case 0x2E53: case 0x2E54: case 0x2E55: case 0x2E56: case 0x2E57: 
case 0x2E58: case 0x2E59: case 0x2E5A: case 0x2E5B: case 0x2E5C: case 0x2E5D: case 0x2E5E: case 0x2E5F: 
case 0x2E60: case 0x2E61: case 0x2E62: case 0x2E63: case 0x2E64: case 0x2E65: case 0x2E66: case 0x2E67: 
case 0x2E68: case 0x2E69: case 0x2E6A: case 0x2E6B: case 0x2E6C: case 0x2E6D: case 0x2E6E: case 0x2E6F: 
case 0x2E70: case 0x2E71: case 0x2E72: case 0x2E73: case 0x2E74: case 0x2E75: case 0x2E76: case 0x2E77: 
case 0x2E78: case 0x2E79: case 0x2E7A: case 0x2E7B: case 0x2E7C: case 0x2E7D: case 0x2E7E: case 0x2E7F: goto _12;
case 0x3005: 
case 0x3031: case 0x3032: case 0x3033: case 0x3034: case 0x3035: 
case 0x303B: goto _13;
default: goto _25;
}
}
} else {
if( input < 0xA7B8 ) {
switch( input ) {
case 0x309D: case 0x309E: 
case 0x30FC: case 0x30FD: case 0x30FE: 
case 0xA015: 
case 0xA4F8: case 0xA4F9: case 0xA4FA: case 0xA4FB: case 0xA4FC: case 0xA4FD: 
case 0xA60C: 
case 0xA640: case 0xA641: case 0xA642: case 0xA643: case 0xA644: case 0xA645: case 0xA646: case 0xA647: 
case 0xA648: case 0xA649: case 0xA64A: case 0xA64B: case 0xA64C: case 0xA64D: case 0xA64E: case 0xA64F: 
case 0xA650: case 0xA651: case 0xA652: case 0xA653: case 0xA654: case 0xA655: case 0xA656: case 0xA657: 
case 0xA658: case 0xA659: case 0xA65A: case 0xA65B: case 0xA65C: case 0xA65D: case 0xA65E: case 0xA65F: 
case 0xA660: case 0xA661: case 0xA662: case 0xA663: case 0xA664: case 0xA665: case 0xA666: case 0xA667: 
case 0xA668: case 0xA669: case 0xA66A: case 0xA66B: case 0xA66C: case 0xA66D: 
case 0xA67F: 
case 0xA680: case 0xA681: case 0xA682: case 0xA683: case 0xA684: case 0xA685: case 0xA686: case 0xA687: 
case 0xA688: case 0xA689: case 0xA68A: case 0xA68B: case 0xA68C: case 0xA68D: case 0xA68E: case 0xA68F: 
case 0xA690: case 0xA691: case 0xA692: case 0xA693: case 0xA694: case 0xA695: case 0xA696: case 0xA697: 
case 0xA698: case 0xA699: case 0xA69A: case 0xA69B: case 0xA69C: case 0xA69D: 
case 0xA717: 
case 0xA718: case 0xA719: case 0xA71A: case 0xA71B: case 0xA71C: case 0xA71D: case 0xA71E: case 0xA71F: goto _13;
case 0xA720: case 0xA721: goto _12;
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: 
case 0xA788: goto _16;
case 0xA789: case 0xA78A: goto _12;
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: goto _16;
case 0xA78F: goto _12;
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: goto _16;
case 0xA7AE: case 0xA7AF: goto _12;
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: goto _16;
default: goto _25;
}
} else {
if( input < 0xAAF3 ) {
switch( input ) {
case 0xA7B8: case 0xA7B9: case 0xA7BA: case 0xA7BB: case 0xA7BC: case 0xA7BD: case 0xA7BE: case 0xA7BF: 
case 0xA7C0: case 0xA7C1: case 0xA7C2: case 0xA7C3: case 0xA7C4: case 0xA7C5: case 0xA7C6: case 0xA7C7: 
case 0xA7C8: case 0xA7C9: case 0xA7CA: case 0xA7CB: case 0xA7CC: case 0xA7CD: case 0xA7CE: case 0xA7CF: 
case 0xA7D0: case 0xA7D1: case 0xA7D2: case 0xA7D3: case 0xA7D4: case 0xA7D5: case 0xA7D6: case 0xA7D7: 
case 0xA7D8: case 0xA7D9: case 0xA7DA: case 0xA7DB: case 0xA7DC: case 0xA7DD: case 0xA7DE: case 0xA7DF: 
case 0xA7E0: case 0xA7E1: case 0xA7E2: case 0xA7E3: case 0xA7E4: case 0xA7E5: case 0xA7E6: case 0xA7E7: 
case 0xA7E8: case 0xA7E9: case 0xA7EA: case 0xA7EB: case 0xA7EC: case 0xA7ED: case 0xA7EE: case 0xA7EF: 
case 0xA7F0: case 0xA7F1: case 0xA7F2: case 0xA7F3: case 0xA7F4: case 0xA7F5: case 0xA7F6: case 0xA7F7: goto _12;
case 0xA7F8: case 0xA7F9: case 0xA7FA: goto _16;
case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: goto _12;
case 0xA9CF: 
case 0xA9E6: 
case 0xAA70: 
case 0xAADD: goto _13;
default: goto _25;
}
} else {
switch( input ) {
case 0xAAF3: case 0xAAF4: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: case 0xAB65: 
case 0xAB70: case 0xAB71: case 0xAB72: case 0xAB73: case 0xAB74: case 0xAB75: case 0xAB76: case 0xAB77: 
case 0xAB78: case 0xAB79: case 0xAB7A: case 0xAB7B: case 0xAB7C: case 0xAB7D: case 0xAB7E: case 0xAB7F: 
case 0xAB80: case 0xAB81: case 0xAB82: case 0xAB83: case 0xAB84: case 0xAB85: case 0xAB86: case 0xAB87: 
case 0xAB88: case 0xAB89: case 0xAB8A: case 0xAB8B: case 0xAB8C: case 0xAB8D: case 0xAB8E: case 0xAB8F: 
case 0xAB90: case 0xAB91: case 0xAB92: case 0xAB93: case 0xAB94: case 0xAB95: case 0xAB96: case 0xAB97: 
case 0xAB98: case 0xAB99: case 0xAB9A: case 0xAB9B: case 0xAB9C: case 0xAB9D: case 0xAB9E: case 0xAB9F: 
case 0xABA0: case 0xABA1: case 0xABA2: case 0xABA3: case 0xABA4: case 0xABA5: case 0xABA6: case 0xABA7: 
case 0xABA8: case 0xABA9: case 0xABAA: case 0xABAB: case 0xABAC: case 0xABAD: case 0xABAE: case 0xABAF: 
case 0xABB0: case 0xABB1: case 0xABB2: case 0xABB3: case 0xABB4: case 0xABB5: case 0xABB6: case 0xABB7: 
case 0xABB8: case 0xABB9: case 0xABBA: case 0xABBB: case 0xABBC: case 0xABBD: case 0xABBE: case 0xABBF: goto _13;
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: goto _16;
case 0xFB07: 
case 0xFB08: case 0xFB09: case 0xFB0A: case 0xFB0B: case 0xFB0C: case 0xFB0D: case 0xFB0E: case 0xFB0F: 
case 0xFB10: case 0xFB11: case 0xFB12: goto _12;
case 0xFB13: case 0xFB14: case 0xFB15: case 0xFB16: case 0xFB17: goto _16;
case 0xFB18: case 0xFB19: case 0xFB1A: case 0xFB1B: case 0xFB1C: case 0xFB1D: case 0xFB1E: case 0xFB1F: 
case 0xFB20: case 0xFB21: case 0xFB22: case 0xFB23: case 0xFB24: case 0xFB25: case 0xFB26: case 0xFB27: 
case 0xFB28: case 0xFB29: case 0xFB2A: case 0xFB2B: case 0xFB2C: case 0xFB2D: case 0xFB2E: case 0xFB2F: 
case 0xFB30: case 0xFB31: case 0xFB32: case 0xFB33: case 0xFB34: case 0xFB35: case 0xFB36: case 0xFB37: 
case 0xFB38: case 0xFB39: case 0xFB3A: case 0xFB3B: case 0xFB3C: case 0xFB3D: case 0xFB3E: case 0xFB3F: 
case 0xFB40: case 0xFB41: case 0xFB42: case 0xFB43: case 0xFB44: case 0xFB45: case 0xFB46: case 0xFB47: 
case 0xFB48: case 0xFB49: case 0xFB4A: case 0xFB4B: case 0xFB4C: case 0xFB4D: case 0xFB4E: case 0xFB4F: goto _12;
default: goto _25;
}
}
}
}
} else {
if( input < 0x1D4BD ) {
if( input < 0x16B40 ) {
if( input < 0xFFFC ) {
switch( input ) {
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: 
case 0xFF70: 
case 0xFF9E: case 0xFF9F: goto _13;
case 0xFFF0: case 0xFFF1: case 0xFFF2: case 0xFFF3: case 0xFFF4: case 0xFFF5: case 0xFFF6: case 0xFFF7: 
case 0xFFF8: goto _12;
default: goto _25;
}
} else {
if( input < 0x10C80 ) {
switch( input ) {
case 0xFFFC: case 0xFFFD: case 0xFFFE: case 0xFFFF: 
case 0x10140: case 0x10141: case 0x10142: case 0x10143: case 0x10144: case 0x10145: case 0x10146: case 0x10147: 
case 0x10148: case 0x10149: case 0x1014A: case 0x1014B: case 0x1014C: case 0x1014D: case 0x1014E: case 0x1014F: 
case 0x10150: case 0x10151: case 0x10152: case 0x10153: case 0x10154: case 0x10155: case 0x10156: case 0x10157: 
case 0x10158: case 0x10159: case 0x1015A: case 0x1015B: case 0x1015C: case 0x1015D: case 0x1015E: case 0x1015F: 
case 0x10160: case 0x10161: case 0x10162: case 0x10163: case 0x10164: case 0x10165: case 0x10166: case 0x10167: 
case 0x10168: case 0x10169: case 0x1016A: case 0x1016B: case 0x1016C: case 0x1016D: case 0x1016E: case 0x1016F: 
case 0x10170: case 0x10171: case 0x10172: case 0x10173: case 0x10174: case 0x10175: case 0x10176: case 0x10177: 
case 0x10178: case 0x10179: case 0x1017A: case 0x1017B: case 0x1017C: case 0x1017D: case 0x1017E: case 0x1017F: 
case 0x10180: case 0x10181: case 0x10182: case 0x10183: case 0x10184: case 0x10185: case 0x10186: case 0x10187: 
case 0x10188: case 0x10189: case 0x1018A: case 0x1018B: case 0x1018C: case 0x1018D: case 0x1018E: case 0x1018F: goto _12;
case 0x10400: case 0x10401: case 0x10402: case 0x10403: case 0x10404: case 0x10405: case 0x10406: case 0x10407: 
case 0x10408: case 0x10409: case 0x1040A: case 0x1040B: case 0x1040C: case 0x1040D: case 0x1040E: case 0x1040F: 
case 0x10410: case 0x10411: case 0x10412: case 0x10413: case 0x10414: case 0x10415: case 0x10416: case 0x10417: 
case 0x10418: case 0x10419: case 0x1041A: case 0x1041B: case 0x1041C: case 0x1041D: case 0x1041E: case 0x1041F: 
case 0x10420: case 0x10421: case 0x10422: case 0x10423: case 0x10424: case 0x10425: case 0x10426: case 0x10427: 
case 0x10428: case 0x10429: case 0x1042A: case 0x1042B: case 0x1042C: case 0x1042D: case 0x1042E: case 0x1042F: 
case 0x10430: case 0x10431: case 0x10432: case 0x10433: case 0x10434: case 0x10435: case 0x10436: case 0x10437: 
case 0x10438: case 0x10439: case 0x1043A: case 0x1043B: case 0x1043C: case 0x1043D: case 0x1043E: case 0x1043F: 
case 0x10440: case 0x10441: case 0x10442: case 0x10443: case 0x10444: case 0x10445: case 0x10446: case 0x10447: 
case 0x10448: case 0x10449: case 0x1044A: case 0x1044B: case 0x1044C: case 0x1044D: case 0x1044E: case 0x1044F: goto _13;
default: goto _25;
}
} else {
switch( input ) {
case 0x10C80: case 0x10C81: case 0x10C82: case 0x10C83: case 0x10C84: case 0x10C85: case 0x10C86: case 0x10C87: 
case 0x10C88: case 0x10C89: case 0x10C8A: case 0x10C8B: case 0x10C8C: case 0x10C8D: case 0x10C8E: case 0x10C8F: 
case 0x10C90: case 0x10C91: case 0x10C92: case 0x10C93: case 0x10C94: case 0x10C95: case 0x10C96: case 0x10C97: 
case 0x10C98: case 0x10C99: case 0x10C9A: case 0x10C9B: case 0x10C9C: case 0x10C9D: case 0x10C9E: case 0x10C9F: 
case 0x10CA0: case 0x10CA1: case 0x10CA2: case 0x10CA3: case 0x10CA4: case 0x10CA5: case 0x10CA6: case 0x10CA7: 
case 0x10CA8: case 0x10CA9: case 0x10CAA: case 0x10CAB: case 0x10CAC: case 0x10CAD: case 0x10CAE: case 0x10CAF: 
case 0x10CB0: case 0x10CB1: case 0x10CB2: 
case 0x10CC0: case 0x10CC1: case 0x10CC2: case 0x10CC3: case 0x10CC4: case 0x10CC5: case 0x10CC6: case 0x10CC7: 
case 0x10CC8: case 0x10CC9: case 0x10CCA: case 0x10CCB: case 0x10CCC: case 0x10CCD: case 0x10CCE: case 0x10CCF: 
case 0x10CD0: case 0x10CD1: case 0x10CD2: case 0x10CD3: case 0x10CD4: case 0x10CD5: case 0x10CD6: case 0x10CD7: 
case 0x10CD8: case 0x10CD9: case 0x10CDA: case 0x10CDB: case 0x10CDC: case 0x10CDD: case 0x10CDE: case 0x10CDF: 
case 0x10CE0: case 0x10CE1: case 0x10CE2: case 0x10CE3: case 0x10CE4: case 0x10CE5: case 0x10CE6: case 0x10CE7: 
case 0x10CE8: case 0x10CE9: case 0x10CEA: case 0x10CEB: case 0x10CEC: case 0x10CED: case 0x10CEE: case 0x10CEF: 
case 0x10CF0: case 0x10CF1: case 0x10CF2: 
case 0x118A0: case 0x118A1: case 0x118A2: case 0x118A3: case 0x118A4: case 0x118A5: case 0x118A6: case 0x118A7: 
case 0x118A8: case 0x118A9: case 0x118AA: case 0x118AB: case 0x118AC: case 0x118AD: case 0x118AE: case 0x118AF: 
case 0x118B0: case 0x118B1: case 0x118B2: case 0x118B3: case 0x118B4: case 0x118B5: case 0x118B6: case 0x118B7: 
case 0x118B8: case 0x118B9: case 0x118BA: case 0x118BB: case 0x118BC: case 0x118BD: case 0x118BE: case 0x118BF: 
case 0x118C0: case 0x118C1: case 0x118C2: case 0x118C3: case 0x118C4: case 0x118C5: case 0x118C6: case 0x118C7: 
case 0x118C8: case 0x118C9: case 0x118CA: case 0x118CB: case 0x118CC: case 0x118CD: case 0x118CE: case 0x118CF: 
case 0x118D0: case 0x118D1: case 0x118D2: case 0x118D3: case 0x118D4: case 0x118D5: case 0x118D6: case 0x118D7: 
case 0x118D8: case 0x118D9: case 0x118DA: case 0x118DB: case 0x118DC: case 0x118DD: case 0x118DE: case 0x118DF: goto _13;
default: goto _25;
}
}
}
} else {
if( input < 0x1D49E ) {
if( input < 0x1D17B ) {
switch( input ) {
case 0x16B40: case 0x16B41: case 0x16B42: case 0x16B43: 
case 0x16F93: case 0x16F94: case 0x16F95: case 0x16F96: case 0x16F97: 
case 0x16F98: case 0x16F99: case 0x16F9A: case 0x16F9B: case 0x16F9C: case 0x16F9D: case 0x16F9E: case 0x16F9F: goto _13;
case 0x1D100: case 0x1D101: case 0x1D102: case 0x1D103: case 0x1D104: case 0x1D105: case 0x1D106: case 0x1D107: 
case 0x1D108: case 0x1D109: case 0x1D10A: case 0x1D10B: case 0x1D10C: case 0x1D10D: case 0x1D10E: case 0x1D10F: 
case 0x1D110: case 0x1D111: case 0x1D112: case 0x1D113: case 0x1D114: case 0x1D115: case 0x1D116: case 0x1D117: 
case 0x1D118: case 0x1D119: case 0x1D11A: case 0x1D11B: case 0x1D11C: case 0x1D11D: case 0x1D11E: case 0x1D11F: 
case 0x1D120: case 0x1D121: case 0x1D122: case 0x1D123: case 0x1D124: case 0x1D125: case 0x1D126: case 0x1D127: 
case 0x1D128: case 0x1D129: case 0x1D12A: case 0x1D12B: case 0x1D12C: case 0x1D12D: case 0x1D12E: case 0x1D12F: 
case 0x1D130: case 0x1D131: case 0x1D132: case 0x1D133: case 0x1D134: case 0x1D135: case 0x1D136: case 0x1D137: 
case 0x1D138: case 0x1D139: case 0x1D13A: case 0x1D13B: case 0x1D13C: case 0x1D13D: case 0x1D13E: case 0x1D13F: 
case 0x1D140: case 0x1D141: case 0x1D142: case 0x1D143: case 0x1D144: case 0x1D145: case 0x1D146: case 0x1D147: 
case 0x1D148: case 0x1D149: case 0x1D14A: case 0x1D14B: case 0x1D14C: case 0x1D14D: case 0x1D14E: case 0x1D14F: 
case 0x1D150: case 0x1D151: case 0x1D152: case 0x1D153: case 0x1D154: case 0x1D155: case 0x1D156: case 0x1D157: 
case 0x1D158: case 0x1D159: case 0x1D15A: case 0x1D15B: case 0x1D15C: case 0x1D15D: case 0x1D15E: case 0x1D15F: 
case 0x1D160: case 0x1D161: case 0x1D162: case 0x1D163: case 0x1D164: case 0x1D165: case 0x1D166: case 0x1D167: 
case 0x1D168: case 0x1D169: case 0x1D16A: case 0x1D16B: case 0x1D16C: case 0x1D16D: case 0x1D16E: case 0x1D16F: 
case 0x1D170: case 0x1D171: case 0x1D172: goto _12;
default: goto _25;
}
} else {
if( input < 0x1D455 ) {
if     ( input < 0x1D200 )  goto _12;
else if( input < 0x1D400 )  goto _25;
else                        goto _16;
} else {
if     ( input == 0x1D455 )  goto _12;
else if( input == 0x1D49D )  goto _12;
else                         goto _16;
}
}
} else {
switch( input ) {
case 0x1D4A0: case 0x1D4A1: 
case 0x1D4A3: case 0x1D4A4: 
case 0x1D4A7: case 0x1D4A8: 
case 0x1D4AD: 
case 0x1D4BA: 
case 0x1D4BC: goto _12;
default: goto _16;
}
}
}
} else {
if( input < 0x1D6C1 ) {
switch( input ) {
case 0x1D4C4: 
case 0x1D506: 
case 0x1D50B: case 0x1D50C: 
case 0x1D515: 
case 0x1D51D: 
case 0x1D53A: 
case 0x1D53F: 
case 0x1D545: 
case 0x1D547: case 0x1D548: case 0x1D549: 
case 0x1D551: 
case 0x1D6A6: case 0x1D6A7: goto _12;
default: goto _16;
}
} else {
if( input < 0x1D76F ) {
switch( input ) {
case 0x1D6C1: 
case 0x1D6DB: 
case 0x1D6FB: 
case 0x1D715: 
case 0x1D735: 
case 0x1D74F: goto _12;
default: goto _16;
}
} else {
if( input < 0x1D7C3 ) {
switch( input ) {
case 0x1D76F: 
case 0x1D789: 
case 0x1D7A9: goto _12;
default: goto _16;
}
} else {
if( input < 0x1D800 ) {
if     ( input == 0x1D7C3 )  goto _12;
else if( input < 0x1D7CC )   goto _16;
else                         goto _12;
} else {
if     ( input < 0x1F600 )  goto _25;
else if( input < 0x1F916 )  goto _12;
else                        goto _25;
}
}
}
}
}
}
}


    __quex_assert_no_passage();
_16:
    /* (297384 from 297384)  */
    goto _65;


    __quex_assert_no_passage();
_36:
    /* (297384 from RELOAD_FORWARD)  */
    goto _66;


    __quex_assert_no_passage();
_38:
    /* (297385 from RELOAD_FORWARD)  */
_68:
    input = *(me->buffer._read_p);


    __quex_debug_state(297385);
if( input < 0x2139 ) {
if( input < 0x10CD ) {
if( input < 0x37E ) {
if( input < 0xF8 ) {
switch( input ) {
case 0x0: goto _39;
case 0x9: goto _12;
case 0xA: case 0xB: case 0xC: case 0xD: goto _18;
case 0x20: case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: case 0x2D: case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: goto _12;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: goto _15;
case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: case 0x60: goto _12;
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: goto _15;
case 0x7B: case 0x7C: case 0x7D: case 0x7E: goto _12;
case 0x85: goto _18;
case 0xA0: case 0xA1: case 0xA2: case 0xA3: case 0xA4: case 0xA5: case 0xA6: case 0xA7: 
case 0xA8: case 0xA9: case 0xAA: case 0xAB: case 0xAC: 
case 0xAE: case 0xAF: case 0xB0: case 0xB1: case 0xB2: case 0xB3: case 0xB4: goto _12;
case 0xB5: goto _15;
case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: case 0xBA: case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: goto _12;
case 0xC0: case 0xC1: case 0xC2: case 0xC3: case 0xC4: case 0xC5: case 0xC6: case 0xC7: 
case 0xC8: case 0xC9: case 0xCA: case 0xCB: case 0xCC: case 0xCD: case 0xCE: case 0xCF: 
case 0xD0: case 0xD1: case 0xD2: case 0xD3: case 0xD4: case 0xD5: case 0xD6: goto _15;
case 0xD7: goto _12;
case 0xD8: case 0xD9: case 0xDA: case 0xDB: case 0xDC: case 0xDD: case 0xDE: case 0xDF: 
case 0xE0: case 0xE1: case 0xE2: case 0xE3: case 0xE4: case 0xE5: case 0xE6: case 0xE7: 
case 0xE8: case 0xE9: case 0xEA: case 0xEB: case 0xEC: case 0xED: case 0xEE: case 0xEF: 
case 0xF0: case 0xF1: case 0xF2: case 0xF3: case 0xF4: case 0xF5: case 0xF6: goto _15;
case 0xF7: goto _12;
default: goto _25;
}
} else {
if( input < 0x2D2 ) {
switch( input ) {
case 0x1BB: 
case 0x1C0: case 0x1C1: case 0x1C2: case 0x1C3: goto _12;
case 0x250: case 0x251: case 0x252: case 0x253: case 0x254: case 0x255: case 0x256: case 0x257: 
case 0x258: case 0x259: case 0x25A: case 0x25B: case 0x25C: case 0x25D: case 0x25E: case 0x25F: 
case 0x260: case 0x261: case 0x262: case 0x263: case 0x264: case 0x265: case 0x266: case 0x267: 
case 0x268: case 0x269: case 0x26A: case 0x26B: case 0x26C: case 0x26D: case 0x26E: case 0x26F: 
case 0x270: case 0x271: case 0x272: case 0x273: case 0x274: case 0x275: case 0x276: case 0x277: 
case 0x278: case 0x279: case 0x27A: case 0x27B: case 0x27C: case 0x27D: case 0x27E: case 0x27F: 
case 0x280: case 0x281: case 0x282: case 0x283: case 0x284: case 0x285: case 0x286: case 0x287: 
case 0x288: case 0x289: case 0x28A: case 0x28B: case 0x28C: case 0x28D: case 0x28E: case 0x28F: 
case 0x290: case 0x291: case 0x292: case 0x293: goto _13;
case 0x294: goto _25;
case 0x295: case 0x296: case 0x297: 
case 0x298: case 0x299: case 0x29A: case 0x29B: case 0x29C: case 0x29D: case 0x29E: case 0x29F: 
case 0x2A0: case 0x2A1: case 0x2A2: case 0x2A3: case 0x2A4: case 0x2A5: case 0x2A6: case 0x2A7: 
case 0x2A8: case 0x2A9: case 0x2AA: case 0x2AB: case 0x2AC: case 0x2AD: case 0x2AE: case 0x2AF: goto _13;
case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: goto _12;
default: goto _15;
}
} else {
switch( input ) {
case 0x2E0: case 0x2E1: case 0x2E2: case 0x2E3: case 0x2E4: 
case 0x2EC: 
case 0x2EE: 
case 0x370: case 0x371: case 0x372: case 0x373: case 0x374: 
case 0x376: case 0x377: 
case 0x37A: case 0x37B: case 0x37C: case 0x37D: goto _15;
default: goto _12;
}
}
}
} else {
if( input < 0x640 ) {
if( input < 0x3A3 ) {
switch( input ) {
case 0x37E: 
case 0x380: case 0x381: case 0x382: case 0x383: case 0x384: case 0x385: 
case 0x387: 
case 0x38B: 
case 0x38D: 
case 0x3A2: goto _12;
default: goto _15;
}
} else {
if( input < 0x531 ) {
switch( input ) {
case 0x3F6: 
case 0x482: case 0x483: case 0x484: case 0x485: case 0x486: case 0x487: case 0x488: case 0x489: goto _12;
case 0x530: goto _25;
default: goto _15;
}
} else {
switch( input ) {
case 0x531: case 0x532: case 0x533: case 0x534: case 0x535: case 0x536: case 0x537: 
case 0x538: case 0x539: case 0x53A: case 0x53B: case 0x53C: case 0x53D: case 0x53E: case 0x53F: 
case 0x540: case 0x541: case 0x542: case 0x543: case 0x544: case 0x545: case 0x546: case 0x547: 
case 0x548: case 0x549: case 0x54A: case 0x54B: case 0x54C: case 0x54D: case 0x54E: case 0x54F: 
case 0x550: case 0x551: case 0x552: case 0x553: case 0x554: case 0x555: case 0x556: 
case 0x559: 
case 0x561: case 0x562: case 0x563: case 0x564: case 0x565: case 0x566: case 0x567: 
case 0x568: case 0x569: case 0x56A: case 0x56B: case 0x56C: case 0x56D: case 0x56E: case 0x56F: 
case 0x570: case 0x571: case 0x572: case 0x573: case 0x574: case 0x575: case 0x576: case 0x577: 
case 0x578: case 0x579: case 0x57A: case 0x57B: case 0x57C: case 0x57D: case 0x57E: case 0x57F: 
case 0x580: case 0x581: case 0x582: case 0x583: case 0x584: case 0x585: case 0x586: case 0x587: goto _13;
default: goto _25;
}
}
}
} else {
switch( input ) {
case 0x640: 
case 0x6E5: case 0x6E6: 
case 0x7F4: case 0x7F5: 
case 0x7FA: 
case 0x81A: 
case 0x824: 
case 0x828: 
case 0x971: 
case 0xE46: 
case 0xEC6: 
case 0x10A0: case 0x10A1: case 0x10A2: case 0x10A3: case 0x10A4: case 0x10A5: case 0x10A6: case 0x10A7: 
case 0x10A8: case 0x10A9: case 0x10AA: case 0x10AB: case 0x10AC: case 0x10AD: case 0x10AE: case 0x10AF: 
case 0x10B0: case 0x10B1: case 0x10B2: case 0x10B3: case 0x10B4: case 0x10B5: case 0x10B6: case 0x10B7: 
case 0x10B8: case 0x10B9: case 0x10BA: case 0x10BB: case 0x10BC: case 0x10BD: case 0x10BE: case 0x10BF: 
case 0x10C0: case 0x10C1: case 0x10C2: case 0x10C3: case 0x10C4: case 0x10C5: 
case 0x10C7: goto _13;
default: goto _25;
}
}
}
} else {
if( input < 0x1FD0 ) {
if( input < 0x1F20 ) {
if( input < 0x1844 ) {
switch( input ) {
case 0x10CD: 
case 0x10FC: 
case 0x13A0: case 0x13A1: case 0x13A2: case 0x13A3: case 0x13A4: case 0x13A5: case 0x13A6: case 0x13A7: 
case 0x13A8: case 0x13A9: case 0x13AA: case 0x13AB: case 0x13AC: case 0x13AD: case 0x13AE: case 0x13AF: 
case 0x13B0: case 0x13B1: case 0x13B2: case 0x13B3: case 0x13B4: case 0x13B5: case 0x13B6: case 0x13B7: 
case 0x13B8: case 0x13B9: case 0x13BA: case 0x13BB: case 0x13BC: case 0x13BD: case 0x13BE: case 0x13BF: 
case 0x13C0: case 0x13C1: case 0x13C2: case 0x13C3: case 0x13C4: case 0x13C5: case 0x13C6: case 0x13C7: 
case 0x13C8: case 0x13C9: case 0x13CA: case 0x13CB: case 0x13CC: case 0x13CD: case 0x13CE: case 0x13CF: 
case 0x13D0: case 0x13D1: case 0x13D2: case 0x13D3: case 0x13D4: case 0x13D5: case 0x13D6: case 0x13D7: 
case 0x13D8: case 0x13D9: case 0x13DA: case 0x13DB: case 0x13DC: case 0x13DD: case 0x13DE: case 0x13DF: 
case 0x13E0: case 0x13E1: case 0x13E2: case 0x13E3: case 0x13E4: case 0x13E5: case 0x13E6: case 0x13E7: 
case 0x13E8: case 0x13E9: case 0x13EA: case 0x13EB: case 0x13EC: case 0x13ED: case 0x13EE: case 0x13EF: 
case 0x13F0: case 0x13F1: case 0x13F2: case 0x13F3: case 0x13F4: case 0x13F5: 
case 0x13F8: case 0x13F9: case 0x13FA: case 0x13FB: case 0x13FC: case 0x13FD: 
case 0x17D7: 
case 0x1843: goto _13;
default: goto _25;
}
} else {
if( input < 0x1DC0 ) {
switch( input ) {
case 0x1AA7: 
case 0x1C78: case 0x1C79: case 0x1C7A: case 0x1C7B: case 0x1C7C: case 0x1C7D: goto _13;
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: case 0x1D26: case 0x1D27: 
case 0x1D28: case 0x1D29: case 0x1D2A: case 0x1D2B: case 0x1D2C: case 0x1D2D: case 0x1D2E: case 0x1D2F: 
case 0x1D30: case 0x1D31: case 0x1D32: case 0x1D33: case 0x1D34: case 0x1D35: case 0x1D36: case 0x1D37: 
case 0x1D38: case 0x1D39: case 0x1D3A: case 0x1D3B: case 0x1D3C: case 0x1D3D: case 0x1D3E: case 0x1D3F: 
case 0x1D40: case 0x1D41: case 0x1D42: case 0x1D43: case 0x1D44: case 0x1D45: case 0x1D46: case 0x1D47: 
case 0x1D48: case 0x1D49: case 0x1D4A: case 0x1D4B: case 0x1D4C: case 0x1D4D: case 0x1D4E: case 0x1D4F: 
case 0x1D50: case 0x1D51: case 0x1D52: case 0x1D53: case 0x1D54: case 0x1D55: case 0x1D56: case 0x1D57: 
case 0x1D58: case 0x1D59: case 0x1D5A: case 0x1D5B: case 0x1D5C: case 0x1D5D: case 0x1D5E: case 0x1D5F: 
case 0x1D60: case 0x1D61: case 0x1D62: case 0x1D63: case 0x1D64: case 0x1D65: case 0x1D66: case 0x1D67: 
case 0x1D68: case 0x1D69: case 0x1D6A: case 0x1D6B: case 0x1D6C: case 0x1D6D: case 0x1D6E: case 0x1D6F: 
case 0x1D70: case 0x1D71: case 0x1D72: case 0x1D73: case 0x1D74: case 0x1D75: case 0x1D76: case 0x1D77: 
case 0x1D78: case 0x1D79: case 0x1D7A: case 0x1D7B: case 0x1D7C: case 0x1D7D: case 0x1D7E: case 0x1D7F: 
case 0x1D80: case 0x1D81: case 0x1D82: case 0x1D83: case 0x1D84: case 0x1D85: case 0x1D86: case 0x1D87: 
case 0x1D88: case 0x1D89: case 0x1D8A: case 0x1D8B: case 0x1D8C: case 0x1D8D: case 0x1D8E: case 0x1D8F: 
case 0x1D90: case 0x1D91: case 0x1D92: case 0x1D93: case 0x1D94: case 0x1D95: case 0x1D96: case 0x1D97: 
case 0x1D98: case 0x1D99: case 0x1D9A: case 0x1D9B: case 0x1D9C: case 0x1D9D: case 0x1D9E: case 0x1D9F: 
case 0x1DA0: case 0x1DA1: case 0x1DA2: case 0x1DA3: case 0x1DA4: case 0x1DA5: case 0x1DA6: case 0x1DA7: 
case 0x1DA8: case 0x1DA9: case 0x1DAA: case 0x1DAB: case 0x1DAC: case 0x1DAD: case 0x1DAE: case 0x1DAF: 
case 0x1DB0: case 0x1DB1: case 0x1DB2: case 0x1DB3: case 0x1DB4: case 0x1DB5: case 0x1DB6: case 0x1DB7: 
case 0x1DB8: case 0x1DB9: case 0x1DBA: case 0x1DBB: case 0x1DBC: case 0x1DBD: case 0x1DBE: case 0x1DBF: goto _15;
default: goto _25;
}
} else {
switch( input ) {
case 0x1DC0: case 0x1DC1: case 0x1DC2: case 0x1DC3: case 0x1DC4: case 0x1DC5: case 0x1DC6: case 0x1DC7: 
case 0x1DC8: case 0x1DC9: case 0x1DCA: case 0x1DCB: case 0x1DCC: case 0x1DCD: case 0x1DCE: case 0x1DCF: 
case 0x1DD0: case 0x1DD1: case 0x1DD2: case 0x1DD3: case 0x1DD4: case 0x1DD5: case 0x1DD6: case 0x1DD7: 
case 0x1DD8: case 0x1DD9: case 0x1DDA: case 0x1DDB: case 0x1DDC: case 0x1DDD: case 0x1DDE: case 0x1DDF: 
case 0x1DE0: case 0x1DE1: case 0x1DE2: case 0x1DE3: case 0x1DE4: case 0x1DE5: case 0x1DE6: case 0x1DE7: 
case 0x1DE8: case 0x1DE9: case 0x1DEA: case 0x1DEB: case 0x1DEC: case 0x1DED: case 0x1DEE: case 0x1DEF: 
case 0x1DF0: case 0x1DF1: case 0x1DF2: case 0x1DF3: case 0x1DF4: case 0x1DF5: case 0x1DF6: case 0x1DF7: 
case 0x1DF8: case 0x1DF9: case 0x1DFA: case 0x1DFB: case 0x1DFC: case 0x1DFD: case 0x1DFE: case 0x1DFF: goto _12;
case 0x1F00: case 0x1F01: case 0x1F02: case 0x1F03: case 0x1F04: case 0x1F05: case 0x1F06: case 0x1F07: 
case 0x1F08: case 0x1F09: case 0x1F0A: case 0x1F0B: case 0x1F0C: case 0x1F0D: case 0x1F0E: case 0x1F0F: 
case 0x1F10: case 0x1F11: case 0x1F12: case 0x1F13: case 0x1F14: case 0x1F15: goto _15;
case 0x1F16: case 0x1F17: goto _12;
case 0x1F18: case 0x1F19: case 0x1F1A: case 0x1F1B: case 0x1F1C: case 0x1F1D: goto _15;
case 0x1F1E: case 0x1F1F: goto _12;
default: goto _13;
}
}
}
} else {
switch( input ) {
case 0x1F46: case 0x1F47: 
case 0x1F4E: case 0x1F4F: 
case 0x1F58: 
case 0x1F5A: 
case 0x1F5C: 
case 0x1F5E: 
case 0x1F7E: case 0x1F7F: 
case 0x1FB5: 
case 0x1FBD: 
case 0x1FBF: case 0x1FC0: case 0x1FC1: 
case 0x1FC5: 
case 0x1FCD: case 0x1FCE: case 0x1FCF: goto _12;
default: goto _15;
}
}
} else {
switch( input ) {
case 0x1FD0: case 0x1FD1: case 0x1FD2: case 0x1FD3: 
case 0x1FD6: case 0x1FD7: case 0x1FD8: case 0x1FD9: case 0x1FDA: case 0x1FDB: 
case 0x1FE0: case 0x1FE1: case 0x1FE2: case 0x1FE3: case 0x1FE4: case 0x1FE5: case 0x1FE6: case 0x1FE7: 
case 0x1FE8: case 0x1FE9: case 0x1FEA: case 0x1FEB: case 0x1FEC: 
case 0x1FF2: case 0x1FF3: case 0x1FF4: 
case 0x1FF6: case 0x1FF7: case 0x1FF8: case 0x1FF9: case 0x1FFA: case 0x1FFB: case 0x1FFC: goto _15;
case 0x200B: case 0x200C: case 0x200D: case 0x200E: case 0x200F: goto _25;
case 0x2028: case 0x2029: goto _18;
case 0x202A: case 0x202B: case 0x202C: case 0x202D: case 0x202E: 
case 0x2060: case 0x2061: case 0x2062: case 0x2063: case 0x2064: 
case 0x2066: case 0x2067: 
case 0x2068: case 0x2069: case 0x206A: case 0x206B: case 0x206C: case 0x206D: case 0x206E: case 0x206F: 
case 0x2070: goto _25;
case 0x2071: goto _13;
case 0x2072: case 0x2073: case 0x2074: case 0x2075: case 0x2076: case 0x2077: 
case 0x2078: case 0x2079: case 0x207A: case 0x207B: case 0x207C: case 0x207D: case 0x207E: goto _25;
case 0x207F: goto _13;
case 0x2080: case 0x2081: case 0x2082: case 0x2083: case 0x2084: case 0x2085: case 0x2086: case 0x2087: 
case 0x2088: case 0x2089: case 0x208A: case 0x208B: case 0x208C: case 0x208D: case 0x208E: case 0x208F: goto _25;
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: goto _13;
case 0x209D: case 0x209E: case 0x209F: 
case 0x20D0: case 0x20D1: case 0x20D2: case 0x20D3: case 0x20D4: case 0x20D5: case 0x20D6: case 0x20D7: 
case 0x20D8: case 0x20D9: case 0x20DA: case 0x20DB: case 0x20DC: case 0x20DD: case 0x20DE: case 0x20DF: 
case 0x20E0: case 0x20E1: case 0x20E2: case 0x20E3: case 0x20E4: case 0x20E5: case 0x20E6: case 0x20E7: 
case 0x20E8: case 0x20E9: case 0x20EA: case 0x20EB: case 0x20EC: case 0x20ED: case 0x20EE: case 0x20EF: 
case 0x20F0: case 0x20F1: case 0x20F2: case 0x20F3: case 0x20F4: case 0x20F5: case 0x20F6: case 0x20F7: 
case 0x20F8: case 0x20F9: case 0x20FA: case 0x20FB: case 0x20FC: case 0x20FD: case 0x20FE: case 0x20FF: goto _25;
case 0x2102: 
case 0x2107: 
case 0x210A: case 0x210B: case 0x210C: case 0x210D: case 0x210E: case 0x210F: 
case 0x2110: case 0x2111: case 0x2112: case 0x2113: 
case 0x2115: 
case 0x2119: case 0x211A: case 0x211B: case 0x211C: case 0x211D: 
case 0x2124: 
case 0x2126: 
case 0x2128: 
case 0x212A: case 0x212B: case 0x212C: case 0x212D: 
case 0x212F: case 0x2130: case 0x2131: case 0x2132: case 0x2133: case 0x2134: goto _15;
default: goto _12;
}
}
}
} else {
if( input < 0xFB50 ) {
if( input < 0x309D ) {
if( input < 0x2C80 ) {
if( input < 0x2190 ) {
switch( input ) {
case 0x2139: goto _15;
case 0x213A: case 0x213B: goto _12;
case 0x213C: case 0x213D: case 0x213E: case 0x213F: goto _15;
case 0x2140: case 0x2141: case 0x2142: case 0x2143: case 0x2144: goto _12;
case 0x2145: case 0x2146: case 0x2147: case 0x2148: case 0x2149: goto _15;
case 0x214A: case 0x214B: case 0x214C: case 0x214D: goto _12;
case 0x214E: goto _15;
case 0x214F: goto _12;
case 0x2183: case 0x2184: goto _13;
default: goto _25;
}
} else {
if( input < 0x2900 ) {
if( input < 0x2700 ) {
if     ( input < 0x2400 )  goto _12;
else if( input < 0x25A0 )  goto _25;
else                       goto _12;
} else {
if     ( input < 0x27C0 )  goto _25;
else if( input < 0x2800 )  goto _12;
else                       goto _25;
}
} else {
switch( input ) {
case 0x2C00: case 0x2C01: case 0x2C02: case 0x2C03: case 0x2C04: case 0x2C05: case 0x2C06: case 0x2C07: 
case 0x2C08: case 0x2C09: case 0x2C0A: case 0x2C0B: case 0x2C0C: case 0x2C0D: case 0x2C0E: case 0x2C0F: 
case 0x2C10: case 0x2C11: case 0x2C12: case 0x2C13: case 0x2C14: case 0x2C15: case 0x2C16: case 0x2C17: 
case 0x2C18: case 0x2C19: case 0x2C1A: case 0x2C1B: case 0x2C1C: case 0x2C1D: case 0x2C1E: case 0x2C1F: 
case 0x2C20: case 0x2C21: case 0x2C22: case 0x2C23: case 0x2C24: case 0x2C25: case 0x2C26: case 0x2C27: 
case 0x2C28: case 0x2C29: case 0x2C2A: case 0x2C2B: case 0x2C2C: case 0x2C2D: case 0x2C2E: goto _13;
case 0x2C2F: goto _25;
case 0x2C30: case 0x2C31: case 0x2C32: case 0x2C33: case 0x2C34: case 0x2C35: case 0x2C36: case 0x2C37: 
case 0x2C38: case 0x2C39: case 0x2C3A: case 0x2C3B: case 0x2C3C: case 0x2C3D: case 0x2C3E: case 0x2C3F: 
case 0x2C40: case 0x2C41: case 0x2C42: case 0x2C43: case 0x2C44: case 0x2C45: case 0x2C46: case 0x2C47: 
case 0x2C48: case 0x2C49: case 0x2C4A: case 0x2C4B: case 0x2C4C: case 0x2C4D: case 0x2C4E: case 0x2C4F: 
case 0x2C50: case 0x2C51: case 0x2C52: case 0x2C53: case 0x2C54: case 0x2C55: case 0x2C56: case 0x2C57: 
case 0x2C58: case 0x2C59: case 0x2C5A: case 0x2C5B: case 0x2C5C: case 0x2C5D: case 0x2C5E: goto _13;
case 0x2C5F: goto _25;
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: case 0x2C7C: case 0x2C7D: case 0x2C7E: case 0x2C7F: goto _15;
default: goto _12;
}
}
}
} else {
if( input < 0x2D6F ) {
switch( input ) {
case 0x2CE5: case 0x2CE6: case 0x2CE7: case 0x2CE8: case 0x2CE9: case 0x2CEA: 
case 0x2CEF: case 0x2CF0: case 0x2CF1: 
case 0x2CF4: case 0x2CF5: case 0x2CF6: case 0x2CF7: 
case 0x2CF8: case 0x2CF9: case 0x2CFA: case 0x2CFB: case 0x2CFC: case 0x2CFD: case 0x2CFE: case 0x2CFF: 
case 0x2D26: 
case 0x2D28: case 0x2D29: case 0x2D2A: case 0x2D2B: case 0x2D2C: 
case 0x2D2E: case 0x2D2F: 
case 0x2D30: case 0x2D31: case 0x2D32: case 0x2D33: case 0x2D34: case 0x2D35: case 0x2D36: case 0x2D37: 
case 0x2D38: case 0x2D39: case 0x2D3A: case 0x2D3B: case 0x2D3C: case 0x2D3D: case 0x2D3E: case 0x2D3F: 
case 0x2D40: case 0x2D41: case 0x2D42: case 0x2D43: case 0x2D44: case 0x2D45: case 0x2D46: case 0x2D47: 
case 0x2D48: case 0x2D49: case 0x2D4A: case 0x2D4B: case 0x2D4C: case 0x2D4D: case 0x2D4E: case 0x2D4F: 
case 0x2D50: case 0x2D51: case 0x2D52: case 0x2D53: case 0x2D54: case 0x2D55: case 0x2D56: case 0x2D57: 
case 0x2D58: case 0x2D59: case 0x2D5A: case 0x2D5B: case 0x2D5C: case 0x2D5D: case 0x2D5E: case 0x2D5F: 
case 0x2D60: case 0x2D61: case 0x2D62: case 0x2D63: case 0x2D64: case 0x2D65: case 0x2D66: case 0x2D67: 
case 0x2D68: case 0x2D69: case 0x2D6A: case 0x2D6B: case 0x2D6C: case 0x2D6D: case 0x2D6E: goto _25;
default: goto _13;
}
} else {
switch( input ) {
case 0x2D6F: goto _13;
case 0x2E00: case 0x2E01: case 0x2E02: case 0x2E03: case 0x2E04: case 0x2E05: case 0x2E06: case 0x2E07: 
case 0x2E08: case 0x2E09: case 0x2E0A: case 0x2E0B: case 0x2E0C: case 0x2E0D: case 0x2E0E: case 0x2E0F: 
case 0x2E10: case 0x2E11: case 0x2E12: case 0x2E13: case 0x2E14: case 0x2E15: case 0x2E16: case 0x2E17: 
case 0x2E18: case 0x2E19: case 0x2E1A: case 0x2E1B: case 0x2E1C: case 0x2E1D: case 0x2E1E: case 0x2E1F: 
case 0x2E20: case 0x2E21: case 0x2E22: case 0x2E23: case 0x2E24: case 0x2E25: case 0x2E26: case 0x2E27: 
case 0x2E28: case 0x2E29: case 0x2E2A: case 0x2E2B: case 0x2E2C: case 0x2E2D: case 0x2E2E: goto _12;
case 0x2E2F: goto _15;
case 0x2E30: case 0x2E31: case 0x2E32: case 0x2E33: case 0x2E34: case 0x2E35: case 0x2E36: case 0x2E37: 
case 0x2E38: case 0x2E39: case 0x2E3A: case 0x2E3B: case 0x2E3C: case 0x2E3D: case 0x2E3E: case 0x2E3F: 
case 0x2E40: case 0x2E41: case 0x2E42: case 0x2E43: case 0x2E44: case 0x2E45: case 0x2E46: case 0x2E47: 
case 0x2E48: case 0x2E49: case 0x2E4A: case 0x2E4B: case 0x2E4C: case 0x2E4D: case 0x2E4E: case 0x2E4F: 
case 0x2E50: case 0x2E51: case 0x2E52: case 0x2E53: case 0x2E54: case 0x2E55: case 0x2E56: case 0x2E57: 
case 0x2E58: case 0x2E59: case 0x2E5A: case 0x2E5B: case 0x2E5C: case 0x2E5D: case 0x2E5E: case 0x2E5F: 
case 0x2E60: case 0x2E61: case 0x2E62: case 0x2E63: case 0x2E64: case 0x2E65: case 0x2E66: case 0x2E67: 
case 0x2E68: case 0x2E69: case 0x2E6A: case 0x2E6B: case 0x2E6C: case 0x2E6D: case 0x2E6E: case 0x2E6F: 
case 0x2E70: case 0x2E71: case 0x2E72: case 0x2E73: case 0x2E74: case 0x2E75: case 0x2E76: case 0x2E77: 
case 0x2E78: case 0x2E79: case 0x2E7A: case 0x2E7B: case 0x2E7C: case 0x2E7D: case 0x2E7E: case 0x2E7F: goto _12;
case 0x3005: 
case 0x3031: case 0x3032: case 0x3033: case 0x3034: case 0x3035: 
case 0x303B: goto _13;
default: goto _25;
}
}
}
} else {
if( input < 0xA7B8 ) {
switch( input ) {
case 0x309D: case 0x309E: 
case 0x30FC: case 0x30FD: case 0x30FE: 
case 0xA015: 
case 0xA4F8: case 0xA4F9: case 0xA4FA: case 0xA4FB: case 0xA4FC: case 0xA4FD: 
case 0xA60C: 
case 0xA640: case 0xA641: case 0xA642: case 0xA643: case 0xA644: case 0xA645: case 0xA646: case 0xA647: 
case 0xA648: case 0xA649: case 0xA64A: case 0xA64B: case 0xA64C: case 0xA64D: case 0xA64E: case 0xA64F: 
case 0xA650: case 0xA651: case 0xA652: case 0xA653: case 0xA654: case 0xA655: case 0xA656: case 0xA657: 
case 0xA658: case 0xA659: case 0xA65A: case 0xA65B: case 0xA65C: case 0xA65D: case 0xA65E: case 0xA65F: 
case 0xA660: case 0xA661: case 0xA662: case 0xA663: case 0xA664: case 0xA665: case 0xA666: case 0xA667: 
case 0xA668: case 0xA669: case 0xA66A: case 0xA66B: case 0xA66C: case 0xA66D: 
case 0xA67F: 
case 0xA680: case 0xA681: case 0xA682: case 0xA683: case 0xA684: case 0xA685: case 0xA686: case 0xA687: 
case 0xA688: case 0xA689: case 0xA68A: case 0xA68B: case 0xA68C: case 0xA68D: case 0xA68E: case 0xA68F: 
case 0xA690: case 0xA691: case 0xA692: case 0xA693: case 0xA694: case 0xA695: case 0xA696: case 0xA697: 
case 0xA698: case 0xA699: case 0xA69A: case 0xA69B: case 0xA69C: case 0xA69D: 
case 0xA717: 
case 0xA718: case 0xA719: case 0xA71A: case 0xA71B: case 0xA71C: case 0xA71D: case 0xA71E: case 0xA71F: goto _13;
case 0xA720: case 0xA721: goto _12;
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: 
case 0xA770: case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: 
case 0xA788: goto _15;
case 0xA789: case 0xA78A: goto _12;
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: goto _15;
case 0xA78F: goto _12;
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: goto _15;
case 0xA7AE: case 0xA7AF: goto _12;
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: goto _15;
default: goto _25;
}
} else {
if( input < 0xAAF3 ) {
switch( input ) {
case 0xA7B8: case 0xA7B9: case 0xA7BA: case 0xA7BB: case 0xA7BC: case 0xA7BD: case 0xA7BE: case 0xA7BF: 
case 0xA7C0: case 0xA7C1: case 0xA7C2: case 0xA7C3: case 0xA7C4: case 0xA7C5: case 0xA7C6: case 0xA7C7: 
case 0xA7C8: case 0xA7C9: case 0xA7CA: case 0xA7CB: case 0xA7CC: case 0xA7CD: case 0xA7CE: case 0xA7CF: 
case 0xA7D0: case 0xA7D1: case 0xA7D2: case 0xA7D3: case 0xA7D4: case 0xA7D5: case 0xA7D6: case 0xA7D7: 
case 0xA7D8: case 0xA7D9: case 0xA7DA: case 0xA7DB: case 0xA7DC: case 0xA7DD: case 0xA7DE: case 0xA7DF: 
case 0xA7E0: case 0xA7E1: case 0xA7E2: case 0xA7E3: case 0xA7E4: case 0xA7E5: case 0xA7E6: case 0xA7E7: 
case 0xA7E8: case 0xA7E9: case 0xA7EA: case 0xA7EB: case 0xA7EC: case 0xA7ED: case 0xA7EE: case 0xA7EF: 
case 0xA7F0: case 0xA7F1: case 0xA7F2: case 0xA7F3: case 0xA7F4: case 0xA7F5: case 0xA7F6: case 0xA7F7: goto _12;
case 0xA7F8: case 0xA7F9: case 0xA7FA: goto _15;
case 0xA7FB: case 0xA7FC: case 0xA7FD: case 0xA7FE: case 0xA7FF: goto _12;
case 0xA9CF: 
case 0xA9E6: 
case 0xAA70: 
case 0xAADD: goto _13;
default: goto _25;
}
} else {
switch( input ) {
case 0xAAF3: case 0xAAF4: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB5C: case 0xAB5D: case 0xAB5E: case 0xAB5F: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: case 0xAB65: 
case 0xAB70: case 0xAB71: case 0xAB72: case 0xAB73: case 0xAB74: case 0xAB75: case 0xAB76: case 0xAB77: 
case 0xAB78: case 0xAB79: case 0xAB7A: case 0xAB7B: case 0xAB7C: case 0xAB7D: case 0xAB7E: case 0xAB7F: 
case 0xAB80: case 0xAB81: case 0xAB82: case 0xAB83: case 0xAB84: case 0xAB85: case 0xAB86: case 0xAB87: 
case 0xAB88: case 0xAB89: case 0xAB8A: case 0xAB8B: case 0xAB8C: case 0xAB8D: case 0xAB8E: case 0xAB8F: 
case 0xAB90: case 0xAB91: case 0xAB92: case 0xAB93: case 0xAB94: case 0xAB95: case 0xAB96: case 0xAB97: 
case 0xAB98: case 0xAB99: case 0xAB9A: case 0xAB9B: case 0xAB9C: case 0xAB9D: case 0xAB9E: case 0xAB9F: 
case 0xABA0: case 0xABA1: case 0xABA2: case 0xABA3: case 0xABA4: case 0xABA5: case 0xABA6: case 0xABA7: 
case 0xABA8: case 0xABA9: case 0xABAA: case 0xABAB: case 0xABAC: case 0xABAD: case 0xABAE: case 0xABAF: 
case 0xABB0: case 0xABB1: case 0xABB2: case 0xABB3: case 0xABB4: case 0xABB5: case 0xABB6: case 0xABB7: 
case 0xABB8: case 0xABB9: case 0xABBA: case 0xABBB: case 0xABBC: case 0xABBD: case 0xABBE: case 0xABBF: goto _13;
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: goto _15;
case 0xFB07: 
case 0xFB08: case 0xFB09: case 0xFB0A: case 0xFB0B: case 0xFB0C: case 0xFB0D: case 0xFB0E: case 0xFB0F: 
case 0xFB10: case 0xFB11: case 0xFB12: goto _12;
case 0xFB13: case 0xFB14: case 0xFB15: case 0xFB16: case 0xFB17: goto _15;
case 0xFB18: case 0xFB19: case 0xFB1A: case 0xFB1B: case 0xFB1C: case 0xFB1D: case 0xFB1E: case 0xFB1F: 
case 0xFB20: case 0xFB21: case 0xFB22: case 0xFB23: case 0xFB24: case 0xFB25: case 0xFB26: case 0xFB27: 
case 0xFB28: case 0xFB29: case 0xFB2A: case 0xFB2B: case 0xFB2C: case 0xFB2D: case 0xFB2E: case 0xFB2F: 
case 0xFB30: case 0xFB31: case 0xFB32: case 0xFB33: case 0xFB34: case 0xFB35: case 0xFB36: case 0xFB37: 
case 0xFB38: case 0xFB39: case 0xFB3A: case 0xFB3B: case 0xFB3C: case 0xFB3D: case 0xFB3E: case 0xFB3F: 
case 0xFB40: case 0xFB41: case 0xFB42: case 0xFB43: case 0xFB44: case 0xFB45: case 0xFB46: case 0xFB47: 
case 0xFB48: case 0xFB49: case 0xFB4A: case 0xFB4B: case 0xFB4C: case 0xFB4D: case 0xFB4E: case 0xFB4F: goto _12;
default: goto _25;
}
}
}
}
} else {
if( input < 0x1D4BD ) {
if( input < 0x16B40 ) {
if( input < 0xFFFC ) {
switch( input ) {
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: 
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: 
case 0xFF70: 
case 0xFF9E: case 0xFF9F: goto _13;
case 0xFFF0: case 0xFFF1: case 0xFFF2: case 0xFFF3: case 0xFFF4: case 0xFFF5: case 0xFFF6: case 0xFFF7: 
case 0xFFF8: goto _12;
default: goto _25;
}
} else {
if( input < 0x10C80 ) {
switch( input ) {
case 0xFFFC: case 0xFFFD: case 0xFFFE: case 0xFFFF: 
case 0x10140: case 0x10141: case 0x10142: case 0x10143: case 0x10144: case 0x10145: case 0x10146: case 0x10147: 
case 0x10148: case 0x10149: case 0x1014A: case 0x1014B: case 0x1014C: case 0x1014D: case 0x1014E: case 0x1014F: 
case 0x10150: case 0x10151: case 0x10152: case 0x10153: case 0x10154: case 0x10155: case 0x10156: case 0x10157: 
case 0x10158: case 0x10159: case 0x1015A: case 0x1015B: case 0x1015C: case 0x1015D: case 0x1015E: case 0x1015F: 
case 0x10160: case 0x10161: case 0x10162: case 0x10163: case 0x10164: case 0x10165: case 0x10166: case 0x10167: 
case 0x10168: case 0x10169: case 0x1016A: case 0x1016B: case 0x1016C: case 0x1016D: case 0x1016E: case 0x1016F: 
case 0x10170: case 0x10171: case 0x10172: case 0x10173: case 0x10174: case 0x10175: case 0x10176: case 0x10177: 
case 0x10178: case 0x10179: case 0x1017A: case 0x1017B: case 0x1017C: case 0x1017D: case 0x1017E: case 0x1017F: 
case 0x10180: case 0x10181: case 0x10182: case 0x10183: case 0x10184: case 0x10185: case 0x10186: case 0x10187: 
case 0x10188: case 0x10189: case 0x1018A: case 0x1018B: case 0x1018C: case 0x1018D: case 0x1018E: case 0x1018F: goto _12;
case 0x10400: case 0x10401: case 0x10402: case 0x10403: case 0x10404: case 0x10405: case 0x10406: case 0x10407: 
case 0x10408: case 0x10409: case 0x1040A: case 0x1040B: case 0x1040C: case 0x1040D: case 0x1040E: case 0x1040F: 
case 0x10410: case 0x10411: case 0x10412: case 0x10413: case 0x10414: case 0x10415: case 0x10416: case 0x10417: 
case 0x10418: case 0x10419: case 0x1041A: case 0x1041B: case 0x1041C: case 0x1041D: case 0x1041E: case 0x1041F: 
case 0x10420: case 0x10421: case 0x10422: case 0x10423: case 0x10424: case 0x10425: case 0x10426: case 0x10427: 
case 0x10428: case 0x10429: case 0x1042A: case 0x1042B: case 0x1042C: case 0x1042D: case 0x1042E: case 0x1042F: 
case 0x10430: case 0x10431: case 0x10432: case 0x10433: case 0x10434: case 0x10435: case 0x10436: case 0x10437: 
case 0x10438: case 0x10439: case 0x1043A: case 0x1043B: case 0x1043C: case 0x1043D: case 0x1043E: case 0x1043F: 
case 0x10440: case 0x10441: case 0x10442: case 0x10443: case 0x10444: case 0x10445: case 0x10446: case 0x10447: 
case 0x10448: case 0x10449: case 0x1044A: case 0x1044B: case 0x1044C: case 0x1044D: case 0x1044E: case 0x1044F: goto _13;
default: goto _25;
}
} else {
switch( input ) {
case 0x10C80: case 0x10C81: case 0x10C82: case 0x10C83: case 0x10C84: case 0x10C85: case 0x10C86: case 0x10C87: 
case 0x10C88: case 0x10C89: case 0x10C8A: case 0x10C8B: case 0x10C8C: case 0x10C8D: case 0x10C8E: case 0x10C8F: 
case 0x10C90: case 0x10C91: case 0x10C92: case 0x10C93: case 0x10C94: case 0x10C95: case 0x10C96: case 0x10C97: 
case 0x10C98: case 0x10C99: case 0x10C9A: case 0x10C9B: case 0x10C9C: case 0x10C9D: case 0x10C9E: case 0x10C9F: 
case 0x10CA0: case 0x10CA1: case 0x10CA2: case 0x10CA3: case 0x10CA4: case 0x10CA5: case 0x10CA6: case 0x10CA7: 
case 0x10CA8: case 0x10CA9: case 0x10CAA: case 0x10CAB: case 0x10CAC: case 0x10CAD: case 0x10CAE: case 0x10CAF: 
case 0x10CB0: case 0x10CB1: case 0x10CB2: 
case 0x10CC0: case 0x10CC1: case 0x10CC2: case 0x10CC3: case 0x10CC4: case 0x10CC5: case 0x10CC6: case 0x10CC7: 
case 0x10CC8: case 0x10CC9: case 0x10CCA: case 0x10CCB: case 0x10CCC: case 0x10CCD: case 0x10CCE: case 0x10CCF: 
case 0x10CD0: case 0x10CD1: case 0x10CD2: case 0x10CD3: case 0x10CD4: case 0x10CD5: case 0x10CD6: case 0x10CD7: 
case 0x10CD8: case 0x10CD9: case 0x10CDA: case 0x10CDB: case 0x10CDC: case 0x10CDD: case 0x10CDE: case 0x10CDF: 
case 0x10CE0: case 0x10CE1: case 0x10CE2: case 0x10CE3: case 0x10CE4: case 0x10CE5: case 0x10CE6: case 0x10CE7: 
case 0x10CE8: case 0x10CE9: case 0x10CEA: case 0x10CEB: case 0x10CEC: case 0x10CED: case 0x10CEE: case 0x10CEF: 
case 0x10CF0: case 0x10CF1: case 0x10CF2: 
case 0x118A0: case 0x118A1: case 0x118A2: case 0x118A3: case 0x118A4: case 0x118A5: case 0x118A6: case 0x118A7: 
case 0x118A8: case 0x118A9: case 0x118AA: case 0x118AB: case 0x118AC: case 0x118AD: case 0x118AE: case 0x118AF: 
case 0x118B0: case 0x118B1: case 0x118B2: case 0x118B3: case 0x118B4: case 0x118B5: case 0x118B6: case 0x118B7: 
case 0x118B8: case 0x118B9: case 0x118BA: case 0x118BB: case 0x118BC: case 0x118BD: case 0x118BE: case 0x118BF: 
case 0x118C0: case 0x118C1: case 0x118C2: case 0x118C3: case 0x118C4: case 0x118C5: case 0x118C6: case 0x118C7: 
case 0x118C8: case 0x118C9: case 0x118CA: case 0x118CB: case 0x118CC: case 0x118CD: case 0x118CE: case 0x118CF: 
case 0x118D0: case 0x118D1: case 0x118D2: case 0x118D3: case 0x118D4: case 0x118D5: case 0x118D6: case 0x118D7: 
case 0x118D8: case 0x118D9: case 0x118DA: case 0x118DB: case 0x118DC: case 0x118DD: case 0x118DE: case 0x118DF: goto _13;
default: goto _25;
}
}
}
} else {
if( input < 0x1D49E ) {
if( input < 0x1D17B ) {
switch( input ) {
case 0x16B40: case 0x16B41: case 0x16B42: case 0x16B43: 
case 0x16F93: case 0x16F94: case 0x16F95: case 0x16F96: case 0x16F97: 
case 0x16F98: case 0x16F99: case 0x16F9A: case 0x16F9B: case 0x16F9C: case 0x16F9D: case 0x16F9E: case 0x16F9F: goto _13;
case 0x1D100: case 0x1D101: case 0x1D102: case 0x1D103: case 0x1D104: case 0x1D105: case 0x1D106: case 0x1D107: 
case 0x1D108: case 0x1D109: case 0x1D10A: case 0x1D10B: case 0x1D10C: case 0x1D10D: case 0x1D10E: case 0x1D10F: 
case 0x1D110: case 0x1D111: case 0x1D112: case 0x1D113: case 0x1D114: case 0x1D115: case 0x1D116: case 0x1D117: 
case 0x1D118: case 0x1D119: case 0x1D11A: case 0x1D11B: case 0x1D11C: case 0x1D11D: case 0x1D11E: case 0x1D11F: 
case 0x1D120: case 0x1D121: case 0x1D122: case 0x1D123: case 0x1D124: case 0x1D125: case 0x1D126: case 0x1D127: 
case 0x1D128: case 0x1D129: case 0x1D12A: case 0x1D12B: case 0x1D12C: case 0x1D12D: case 0x1D12E: case 0x1D12F: 
case 0x1D130: case 0x1D131: case 0x1D132: case 0x1D133: case 0x1D134: case 0x1D135: case 0x1D136: case 0x1D137: 
case 0x1D138: case 0x1D139: case 0x1D13A: case 0x1D13B: case 0x1D13C: case 0x1D13D: case 0x1D13E: case 0x1D13F: 
case 0x1D140: case 0x1D141: case 0x1D142: case 0x1D143: case 0x1D144: case 0x1D145: case 0x1D146: case 0x1D147: 
case 0x1D148: case 0x1D149: case 0x1D14A: case 0x1D14B: case 0x1D14C: case 0x1D14D: case 0x1D14E: case 0x1D14F: 
case 0x1D150: case 0x1D151: case 0x1D152: case 0x1D153: case 0x1D154: case 0x1D155: case 0x1D156: case 0x1D157: 
case 0x1D158: case 0x1D159: case 0x1D15A: case 0x1D15B: case 0x1D15C: case 0x1D15D: case 0x1D15E: case 0x1D15F: 
case 0x1D160: case 0x1D161: case 0x1D162: case 0x1D163: case 0x1D164: case 0x1D165: case 0x1D166: case 0x1D167: 
case 0x1D168: case 0x1D169: case 0x1D16A: case 0x1D16B: case 0x1D16C: case 0x1D16D: case 0x1D16E: case 0x1D16F: 
case 0x1D170: case 0x1D171: case 0x1D172: goto _12;
default: goto _25;
}
} else {
if( input < 0x1D455 ) {
if     ( input < 0x1D200 )  goto _12;
else if( input < 0x1D400 )  goto _25;
else                        goto _15;
} else {
if     ( input == 0x1D455 )  goto _12;
else if( input == 0x1D49D )  goto _12;
else                         goto _15;
}
}
} else {
switch( input ) {
case 0x1D4A0: case 0x1D4A1: 
case 0x1D4A3: case 0x1D4A4: 
case 0x1D4A7: case 0x1D4A8: 
case 0x1D4AD: 
case 0x1D4BA: 
case 0x1D4BC: goto _12;
default: goto _15;
}
}
}
} else {
if( input < 0x1D6C1 ) {
switch( input ) {
case 0x1D4C4: 
case 0x1D506: 
case 0x1D50B: case 0x1D50C: 
case 0x1D515: 
case 0x1D51D: 
case 0x1D53A: 
case 0x1D53F: 
case 0x1D545: 
case 0x1D547: case 0x1D548: case 0x1D549: 
case 0x1D551: 
case 0x1D6A6: case 0x1D6A7: goto _12;
default: goto _15;
}
} else {
if( input < 0x1D76F ) {
switch( input ) {
case 0x1D6C1: 
case 0x1D6DB: 
case 0x1D6FB: 
case 0x1D715: 
case 0x1D735: 
case 0x1D74F: goto _12;
default: goto _15;
}
} else {
if( input < 0x1D7C3 ) {
switch( input ) {
case 0x1D76F: 
case 0x1D789: 
case 0x1D7A9: goto _12;
default: goto _15;
}
} else {
if( input < 0x1D800 ) {
if     ( input == 0x1D7C3 )  goto _12;
else if( input < 0x1D7CC )   goto _15;
else                         goto _12;
} else {
if     ( input < 0x1F600 )  goto _25;
else if( input < 0x1F916 )  goto _12;
else                        goto _25;
}
}
}
}
}
}
}


    __quex_assert_no_passage();
_17:
    /* (297385 from 297384)  */
    position[0] = me->buffer._read_p; __quex_debug("position[0] = input_p;\n");

    ++(me->buffer._read_p);

    { last_acceptance = 1722; __quex_debug("last_acceptance = 1722\n"); }

    goto _68;


    __quex_assert_no_passage();
_18:
    /* (297386 from 297385)  */
    position[0] = me->buffer._read_p; __quex_debug("position[0] = input_p;\n");

_70:
    ++(me->buffer._read_p);

_71:
    input = *(me->buffer._read_p);


    __quex_debug_state(297386);
if( input < 0x213C ) {
if( input < 0x1D79 ) {
if( input < 0x387 ) {
if( input < 0x1BC ) {
if( input < 0xB5 ) {
switch( input ) {
case 0x0: goto _41;
case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: 
case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: goto _20;
default: goto _27;
}
} else {
switch( input ) {
case 0xB6: case 0xB7: 
case 0xB8: case 0xB9: case 0xBA: case 0xBB: case 0xBC: case 0xBD: case 0xBE: case 0xBF: 
case 0xD7: 
case 0xF7: 
case 0x1BB: goto _27;
default: goto _20;
}
}
} else {
switch( input ) {
case 0x1C0: case 0x1C1: case 0x1C2: case 0x1C3: 
case 0x294: 
case 0x2B0: case 0x2B1: case 0x2B2: case 0x2B3: case 0x2B4: case 0x2B5: case 0x2B6: case 0x2B7: 
case 0x2B8: case 0x2B9: case 0x2BA: case 0x2BB: case 0x2BC: case 0x2BD: case 0x2BE: case 0x2BF: 
case 0x2C0: case 0x2C1: case 0x2C2: case 0x2C3: case 0x2C4: case 0x2C5: case 0x2C6: case 0x2C7: 
case 0x2C8: case 0x2C9: case 0x2CA: case 0x2CB: case 0x2CC: case 0x2CD: case 0x2CE: case 0x2CF: 
case 0x2D0: case 0x2D1: case 0x2D2: case 0x2D3: case 0x2D4: case 0x2D5: case 0x2D6: case 0x2D7: 
case 0x2D8: case 0x2D9: case 0x2DA: case 0x2DB: case 0x2DC: case 0x2DD: case 0x2DE: case 0x2DF: 
case 0x2E0: case 0x2E1: case 0x2E2: case 0x2E3: case 0x2E4: case 0x2E5: case 0x2E6: case 0x2E7: 
case 0x2E8: case 0x2E9: case 0x2EA: case 0x2EB: case 0x2EC: case 0x2ED: case 0x2EE: case 0x2EF: 
case 0x2F0: case 0x2F1: case 0x2F2: case 0x2F3: case 0x2F4: case 0x2F5: case 0x2F6: case 0x2F7: 
case 0x2F8: case 0x2F9: case 0x2FA: case 0x2FB: case 0x2FC: case 0x2FD: case 0x2FE: case 0x2FF: 
case 0x300: case 0x301: case 0x302: case 0x303: case 0x304: case 0x305: case 0x306: case 0x307: 
case 0x308: case 0x309: case 0x30A: case 0x30B: case 0x30C: case 0x30D: case 0x30E: case 0x30F: 
case 0x310: case 0x311: case 0x312: case 0x313: case 0x314: case 0x315: case 0x316: case 0x317: 
case 0x318: case 0x319: case 0x31A: case 0x31B: case 0x31C: case 0x31D: case 0x31E: case 0x31F: 
case 0x320: case 0x321: case 0x322: case 0x323: case 0x324: case 0x325: case 0x326: case 0x327: 
case 0x328: case 0x329: case 0x32A: case 0x32B: case 0x32C: case 0x32D: case 0x32E: case 0x32F: 
case 0x330: case 0x331: case 0x332: case 0x333: case 0x334: case 0x335: case 0x336: case 0x337: 
case 0x338: case 0x339: case 0x33A: case 0x33B: case 0x33C: case 0x33D: case 0x33E: case 0x33F: 
case 0x340: case 0x341: case 0x342: case 0x343: case 0x344: case 0x345: case 0x346: case 0x347: 
case 0x348: case 0x349: case 0x34A: case 0x34B: case 0x34C: case 0x34D: case 0x34E: case 0x34F: 
case 0x350: case 0x351: case 0x352: case 0x353: case 0x354: case 0x355: case 0x356: case 0x357: 
case 0x358: case 0x359: case 0x35A: case 0x35B: case 0x35C: case 0x35D: case 0x35E: case 0x35F: 
case 0x360: case 0x361: case 0x362: case 0x363: case 0x364: case 0x365: case 0x366: case 0x367: 
case 0x368: case 0x369: case 0x36A: case 0x36B: case 0x36C: case 0x36D: case 0x36E: case 0x36F: 
case 0x374: case 0x375: 
case 0x378: case 0x379: case 0x37A: 
case 0x37E: 
case 0x380: case 0x381: case 0x382: case 0x383: case 0x384: case 0x385: goto _27;
default: goto _20;
}
}
} else {
if( input < 0x561 ) {
switch( input ) {
case 0x387: 
case 0x38B: 
case 0x38D: 
case 0x3A2: 
case 0x3F6: 
case 0x482: case 0x483: case 0x484: case 0x485: case 0x486: case 0x487: case 0x488: case 0x489: 
case 0x530: 
case 0x557: 
case 0x558: case 0x559: case 0x55A: case 0x55B: case 0x55C: case 0x55D: case 0x55E: case 0x55F: 
case 0x560: goto _27;
default: goto _20;
}
} else {
switch( input ) {
case 0x561: case 0x562: case 0x563: case 0x564: case 0x565: case 0x566: case 0x567: 
case 0x568: case 0x569: case 0x56A: case 0x56B: case 0x56C: case 0x56D: case 0x56E: case 0x56F: 
case 0x570: case 0x571: case 0x572: case 0x573: case 0x574: case 0x575: case 0x576: case 0x577: 
case 0x578: case 0x579: case 0x57A: case 0x57B: case 0x57C: case 0x57D: case 0x57E: case 0x57F: 
case 0x580: case 0x581: case 0x582: case 0x583: case 0x584: case 0x585: case 0x586: case 0x587: 
case 0x10A0: case 0x10A1: case 0x10A2: case 0x10A3: case 0x10A4: case 0x10A5: case 0x10A6: case 0x10A7: 
case 0x10A8: case 0x10A9: case 0x10AA: case 0x10AB: case 0x10AC: case 0x10AD: case 0x10AE: case 0x10AF: 
case 0x10B0: case 0x10B1: case 0x10B2: case 0x10B3: case 0x10B4: case 0x10B5: case 0x10B6: case 0x10B7: 
case 0x10B8: case 0x10B9: case 0x10BA: case 0x10BB: case 0x10BC: case 0x10BD: case 0x10BE: case 0x10BF: 
case 0x10C0: case 0x10C1: case 0x10C2: case 0x10C3: case 0x10C4: case 0x10C5: 
case 0x10C7: 
case 0x10CD: 
case 0x13A0: case 0x13A1: case 0x13A2: case 0x13A3: case 0x13A4: case 0x13A5: case 0x13A6: case 0x13A7: 
case 0x13A8: case 0x13A9: case 0x13AA: case 0x13AB: case 0x13AC: case 0x13AD: case 0x13AE: case 0x13AF: 
case 0x13B0: case 0x13B1: case 0x13B2: case 0x13B3: case 0x13B4: case 0x13B5: case 0x13B6: case 0x13B7: 
case 0x13B8: case 0x13B9: case 0x13BA: case 0x13BB: case 0x13BC: case 0x13BD: case 0x13BE: case 0x13BF: 
case 0x13C0: case 0x13C1: case 0x13C2: case 0x13C3: case 0x13C4: case 0x13C5: case 0x13C6: case 0x13C7: 
case 0x13C8: case 0x13C9: case 0x13CA: case 0x13CB: case 0x13CC: case 0x13CD: case 0x13CE: case 0x13CF: 
case 0x13D0: case 0x13D1: case 0x13D2: case 0x13D3: case 0x13D4: case 0x13D5: case 0x13D6: case 0x13D7: 
case 0x13D8: case 0x13D9: case 0x13DA: case 0x13DB: case 0x13DC: case 0x13DD: case 0x13DE: case 0x13DF: 
case 0x13E0: case 0x13E1: case 0x13E2: case 0x13E3: case 0x13E4: case 0x13E5: case 0x13E6: case 0x13E7: 
case 0x13E8: case 0x13E9: case 0x13EA: case 0x13EB: case 0x13EC: case 0x13ED: case 0x13EE: case 0x13EF: 
case 0x13F0: case 0x13F1: case 0x13F2: case 0x13F3: case 0x13F4: case 0x13F5: 
case 0x13F8: case 0x13F9: case 0x13FA: case 0x13FB: case 0x13FC: case 0x13FD: 
case 0x1D00: case 0x1D01: case 0x1D02: case 0x1D03: case 0x1D04: case 0x1D05: case 0x1D06: case 0x1D07: 
case 0x1D08: case 0x1D09: case 0x1D0A: case 0x1D0B: case 0x1D0C: case 0x1D0D: case 0x1D0E: case 0x1D0F: 
case 0x1D10: case 0x1D11: case 0x1D12: case 0x1D13: case 0x1D14: case 0x1D15: case 0x1D16: case 0x1D17: 
case 0x1D18: case 0x1D19: case 0x1D1A: case 0x1D1B: case 0x1D1C: case 0x1D1D: case 0x1D1E: case 0x1D1F: 
case 0x1D20: case 0x1D21: case 0x1D22: case 0x1D23: case 0x1D24: case 0x1D25: case 0x1D26: case 0x1D27: 
case 0x1D28: case 0x1D29: case 0x1D2A: case 0x1D2B: 
case 0x1D6B: case 0x1D6C: case 0x1D6D: case 0x1D6E: case 0x1D6F: 
case 0x1D70: case 0x1D71: case 0x1D72: case 0x1D73: case 0x1D74: case 0x1D75: case 0x1D76: case 0x1D77: goto _20;
default: goto _27;
}
}
}
} else {
if( input < 0x1FD4 ) {
switch( input ) {
case 0x1D9B: case 0x1D9C: case 0x1D9D: case 0x1D9E: case 0x1D9F: 
case 0x1DA0: case 0x1DA1: case 0x1DA2: case 0x1DA3: case 0x1DA4: case 0x1DA5: case 0x1DA6: case 0x1DA7: 
case 0x1DA8: case 0x1DA9: case 0x1DAA: case 0x1DAB: case 0x1DAC: case 0x1DAD: case 0x1DAE: case 0x1DAF: 
case 0x1DB0: case 0x1DB1: case 0x1DB2: case 0x1DB3: case 0x1DB4: case 0x1DB5: case 0x1DB6: case 0x1DB7: 
case 0x1DB8: case 0x1DB9: case 0x1DBA: case 0x1DBB: case 0x1DBC: case 0x1DBD: case 0x1DBE: case 0x1DBF: 
case 0x1DC0: case 0x1DC1: case 0x1DC2: case 0x1DC3: case 0x1DC4: case 0x1DC5: case 0x1DC6: case 0x1DC7: 
case 0x1DC8: case 0x1DC9: case 0x1DCA: case 0x1DCB: case 0x1DCC: case 0x1DCD: case 0x1DCE: case 0x1DCF: 
case 0x1DD0: case 0x1DD1: case 0x1DD2: case 0x1DD3: case 0x1DD4: case 0x1DD5: case 0x1DD6: case 0x1DD7: 
case 0x1DD8: case 0x1DD9: case 0x1DDA: case 0x1DDB: case 0x1DDC: case 0x1DDD: case 0x1DDE: case 0x1DDF: 
case 0x1DE0: case 0x1DE1: case 0x1DE2: case 0x1DE3: case 0x1DE4: case 0x1DE5: case 0x1DE6: case 0x1DE7: 
case 0x1DE8: case 0x1DE9: case 0x1DEA: case 0x1DEB: case 0x1DEC: case 0x1DED: case 0x1DEE: case 0x1DEF: 
case 0x1DF0: case 0x1DF1: case 0x1DF2: case 0x1DF3: case 0x1DF4: case 0x1DF5: case 0x1DF6: case 0x1DF7: 
case 0x1DF8: case 0x1DF9: case 0x1DFA: case 0x1DFB: case 0x1DFC: case 0x1DFD: case 0x1DFE: case 0x1DFF: 
case 0x1F16: case 0x1F17: 
case 0x1F1E: case 0x1F1F: 
case 0x1F46: case 0x1F47: 
case 0x1F4E: case 0x1F4F: 
case 0x1F58: 
case 0x1F5A: 
case 0x1F5C: 
case 0x1F5E: 
case 0x1F7E: case 0x1F7F: 
case 0x1FB5: 
case 0x1FBD: 
case 0x1FBF: case 0x1FC0: case 0x1FC1: 
case 0x1FC5: 
case 0x1FCD: case 0x1FCE: case 0x1FCF: goto _27;
default: goto _20;
}
} else {
switch( input ) {
case 0x1FD6: case 0x1FD7: case 0x1FD8: case 0x1FD9: case 0x1FDA: case 0x1FDB: 
case 0x1FE0: case 0x1FE1: case 0x1FE2: case 0x1FE3: case 0x1FE4: case 0x1FE5: case 0x1FE6: case 0x1FE7: 
case 0x1FE8: case 0x1FE9: case 0x1FEA: case 0x1FEB: case 0x1FEC: 
case 0x1FF2: case 0x1FF3: case 0x1FF4: 
case 0x1FF6: case 0x1FF7: case 0x1FF8: case 0x1FF9: case 0x1FFA: case 0x1FFB: case 0x1FFC: 
case 0x2102: 
case 0x2107: 
case 0x210A: case 0x210B: case 0x210C: case 0x210D: case 0x210E: case 0x210F: 
case 0x2110: case 0x2111: case 0x2112: case 0x2113: 
case 0x2115: 
case 0x2119: case 0x211A: case 0x211B: case 0x211C: case 0x211D: 
case 0x2124: 
case 0x2126: 
case 0x2128: 
case 0x212A: case 0x212B: case 0x212C: case 0x212D: 
case 0x212F: case 0x2130: case 0x2131: case 0x2132: case 0x2133: case 0x2134: 
case 0x2139: goto _20;
default: goto _27;
}
}
}
} else {
if( input < 0x118A0 ) {
if( input < 0xA770 ) {
if( input < 0x2CE5 ) {
switch( input ) {
case 0x213C: case 0x213D: case 0x213E: case 0x213F: 
case 0x2145: case 0x2146: case 0x2147: case 0x2148: case 0x2149: 
case 0x214E: 
case 0x2183: case 0x2184: 
case 0x2C00: case 0x2C01: case 0x2C02: case 0x2C03: case 0x2C04: case 0x2C05: case 0x2C06: case 0x2C07: 
case 0x2C08: case 0x2C09: case 0x2C0A: case 0x2C0B: case 0x2C0C: case 0x2C0D: case 0x2C0E: case 0x2C0F: 
case 0x2C10: case 0x2C11: case 0x2C12: case 0x2C13: case 0x2C14: case 0x2C15: case 0x2C16: case 0x2C17: 
case 0x2C18: case 0x2C19: case 0x2C1A: case 0x2C1B: case 0x2C1C: case 0x2C1D: case 0x2C1E: case 0x2C1F: 
case 0x2C20: case 0x2C21: case 0x2C22: case 0x2C23: case 0x2C24: case 0x2C25: case 0x2C26: case 0x2C27: 
case 0x2C28: case 0x2C29: case 0x2C2A: case 0x2C2B: case 0x2C2C: case 0x2C2D: case 0x2C2E: 
case 0x2C30: case 0x2C31: case 0x2C32: case 0x2C33: case 0x2C34: case 0x2C35: case 0x2C36: case 0x2C37: 
case 0x2C38: case 0x2C39: case 0x2C3A: case 0x2C3B: case 0x2C3C: case 0x2C3D: case 0x2C3E: case 0x2C3F: 
case 0x2C40: case 0x2C41: case 0x2C42: case 0x2C43: case 0x2C44: case 0x2C45: case 0x2C46: case 0x2C47: 
case 0x2C48: case 0x2C49: case 0x2C4A: case 0x2C4B: case 0x2C4C: case 0x2C4D: case 0x2C4E: case 0x2C4F: 
case 0x2C50: case 0x2C51: case 0x2C52: case 0x2C53: case 0x2C54: case 0x2C55: case 0x2C56: case 0x2C57: 
case 0x2C58: case 0x2C59: case 0x2C5A: case 0x2C5B: case 0x2C5C: case 0x2C5D: case 0x2C5E: 
case 0x2C60: case 0x2C61: case 0x2C62: case 0x2C63: case 0x2C64: case 0x2C65: case 0x2C66: case 0x2C67: 
case 0x2C68: case 0x2C69: case 0x2C6A: case 0x2C6B: case 0x2C6C: case 0x2C6D: case 0x2C6E: case 0x2C6F: 
case 0x2C70: case 0x2C71: case 0x2C72: case 0x2C73: case 0x2C74: case 0x2C75: case 0x2C76: case 0x2C77: 
case 0x2C78: case 0x2C79: case 0x2C7A: case 0x2C7B: 
case 0x2C7E: case 0x2C7F: 
case 0x2C80: case 0x2C81: case 0x2C82: case 0x2C83: case 0x2C84: case 0x2C85: case 0x2C86: case 0x2C87: 
case 0x2C88: case 0x2C89: case 0x2C8A: case 0x2C8B: case 0x2C8C: case 0x2C8D: case 0x2C8E: case 0x2C8F: 
case 0x2C90: case 0x2C91: case 0x2C92: case 0x2C93: case 0x2C94: case 0x2C95: case 0x2C96: case 0x2C97: 
case 0x2C98: case 0x2C99: case 0x2C9A: case 0x2C9B: case 0x2C9C: case 0x2C9D: case 0x2C9E: case 0x2C9F: 
case 0x2CA0: case 0x2CA1: case 0x2CA2: case 0x2CA3: case 0x2CA4: case 0x2CA5: case 0x2CA6: case 0x2CA7: 
case 0x2CA8: case 0x2CA9: case 0x2CAA: case 0x2CAB: case 0x2CAC: case 0x2CAD: case 0x2CAE: case 0x2CAF: 
case 0x2CB0: case 0x2CB1: case 0x2CB2: case 0x2CB3: case 0x2CB4: case 0x2CB5: case 0x2CB6: case 0x2CB7: 
case 0x2CB8: case 0x2CB9: case 0x2CBA: case 0x2CBB: case 0x2CBC: case 0x2CBD: case 0x2CBE: case 0x2CBF: 
case 0x2CC0: case 0x2CC1: case 0x2CC2: case 0x2CC3: case 0x2CC4: case 0x2CC5: case 0x2CC6: case 0x2CC7: 
case 0x2CC8: case 0x2CC9: case 0x2CCA: case 0x2CCB: case 0x2CCC: case 0x2CCD: case 0x2CCE: case 0x2CCF: 
case 0x2CD0: case 0x2CD1: case 0x2CD2: case 0x2CD3: case 0x2CD4: case 0x2CD5: case 0x2CD6: case 0x2CD7: 
case 0x2CD8: case 0x2CD9: case 0x2CDA: case 0x2CDB: case 0x2CDC: case 0x2CDD: case 0x2CDE: case 0x2CDF: 
case 0x2CE0: case 0x2CE1: case 0x2CE2: case 0x2CE3: case 0x2CE4: goto _20;
default: goto _27;
}
} else {
switch( input ) {
case 0x2CEB: case 0x2CEC: case 0x2CED: case 0x2CEE: 
case 0x2CF2: case 0x2CF3: 
case 0x2D00: case 0x2D01: case 0x2D02: case 0x2D03: case 0x2D04: case 0x2D05: case 0x2D06: case 0x2D07: 
case 0x2D08: case 0x2D09: case 0x2D0A: case 0x2D0B: case 0x2D0C: case 0x2D0D: case 0x2D0E: case 0x2D0F: 
case 0x2D10: case 0x2D11: case 0x2D12: case 0x2D13: case 0x2D14: case 0x2D15: case 0x2D16: case 0x2D17: 
case 0x2D18: case 0x2D19: case 0x2D1A: case 0x2D1B: case 0x2D1C: case 0x2D1D: case 0x2D1E: case 0x2D1F: 
case 0x2D20: case 0x2D21: case 0x2D22: case 0x2D23: case 0x2D24: case 0x2D25: 
case 0x2D27: 
case 0x2D2D: 
case 0xA640: case 0xA641: case 0xA642: case 0xA643: case 0xA644: case 0xA645: case 0xA646: case 0xA647: 
case 0xA648: case 0xA649: case 0xA64A: case 0xA64B: case 0xA64C: case 0xA64D: case 0xA64E: case 0xA64F: 
case 0xA650: case 0xA651: case 0xA652: case 0xA653: case 0xA654: case 0xA655: case 0xA656: case 0xA657: 
case 0xA658: case 0xA659: case 0xA65A: case 0xA65B: case 0xA65C: case 0xA65D: case 0xA65E: case 0xA65F: 
case 0xA660: case 0xA661: case 0xA662: case 0xA663: case 0xA664: case 0xA665: case 0xA666: case 0xA667: 
case 0xA668: case 0xA669: case 0xA66A: case 0xA66B: case 0xA66C: case 0xA66D: 
case 0xA680: case 0xA681: case 0xA682: case 0xA683: case 0xA684: case 0xA685: case 0xA686: case 0xA687: 
case 0xA688: case 0xA689: case 0xA68A: case 0xA68B: case 0xA68C: case 0xA68D: case 0xA68E: case 0xA68F: 
case 0xA690: case 0xA691: case 0xA692: case 0xA693: case 0xA694: case 0xA695: case 0xA696: case 0xA697: 
case 0xA698: case 0xA699: case 0xA69A: case 0xA69B: 
case 0xA722: case 0xA723: case 0xA724: case 0xA725: case 0xA726: case 0xA727: 
case 0xA728: case 0xA729: case 0xA72A: case 0xA72B: case 0xA72C: case 0xA72D: case 0xA72E: case 0xA72F: 
case 0xA730: case 0xA731: case 0xA732: case 0xA733: case 0xA734: case 0xA735: case 0xA736: case 0xA737: 
case 0xA738: case 0xA739: case 0xA73A: case 0xA73B: case 0xA73C: case 0xA73D: case 0xA73E: case 0xA73F: 
case 0xA740: case 0xA741: case 0xA742: case 0xA743: case 0xA744: case 0xA745: case 0xA746: case 0xA747: 
case 0xA748: case 0xA749: case 0xA74A: case 0xA74B: case 0xA74C: case 0xA74D: case 0xA74E: case 0xA74F: 
case 0xA750: case 0xA751: case 0xA752: case 0xA753: case 0xA754: case 0xA755: case 0xA756: case 0xA757: 
case 0xA758: case 0xA759: case 0xA75A: case 0xA75B: case 0xA75C: case 0xA75D: case 0xA75E: case 0xA75F: 
case 0xA760: case 0xA761: case 0xA762: case 0xA763: case 0xA764: case 0xA765: case 0xA766: case 0xA767: 
case 0xA768: case 0xA769: case 0xA76A: case 0xA76B: case 0xA76C: case 0xA76D: case 0xA76E: case 0xA76F: goto _20;
default: goto _27;
}
}
} else {
if( input < 0xAB70 ) {
switch( input ) {
case 0xA771: case 0xA772: case 0xA773: case 0xA774: case 0xA775: case 0xA776: case 0xA777: 
case 0xA778: case 0xA779: case 0xA77A: case 0xA77B: case 0xA77C: case 0xA77D: case 0xA77E: case 0xA77F: 
case 0xA780: case 0xA781: case 0xA782: case 0xA783: case 0xA784: case 0xA785: case 0xA786: case 0xA787: 
case 0xA78B: case 0xA78C: case 0xA78D: case 0xA78E: 
case 0xA790: case 0xA791: case 0xA792: case 0xA793: case 0xA794: case 0xA795: case 0xA796: case 0xA797: 
case 0xA798: case 0xA799: case 0xA79A: case 0xA79B: case 0xA79C: case 0xA79D: case 0xA79E: case 0xA79F: 
case 0xA7A0: case 0xA7A1: case 0xA7A2: case 0xA7A3: case 0xA7A4: case 0xA7A5: case 0xA7A6: case 0xA7A7: 
case 0xA7A8: case 0xA7A9: case 0xA7AA: case 0xA7AB: case 0xA7AC: case 0xA7AD: 
case 0xA7B0: case 0xA7B1: case 0xA7B2: case 0xA7B3: case 0xA7B4: case 0xA7B5: case 0xA7B6: case 0xA7B7: 
case 0xA7FA: 
case 0xAB30: case 0xAB31: case 0xAB32: case 0xAB33: case 0xAB34: case 0xAB35: case 0xAB36: case 0xAB37: 
case 0xAB38: case 0xAB39: case 0xAB3A: case 0xAB3B: case 0xAB3C: case 0xAB3D: case 0xAB3E: case 0xAB3F: 
case 0xAB40: case 0xAB41: case 0xAB42: case 0xAB43: case 0xAB44: case 0xAB45: case 0xAB46: case 0xAB47: 
case 0xAB48: case 0xAB49: case 0xAB4A: case 0xAB4B: case 0xAB4C: case 0xAB4D: case 0xAB4E: case 0xAB4F: 
case 0xAB50: case 0xAB51: case 0xAB52: case 0xAB53: case 0xAB54: case 0xAB55: case 0xAB56: case 0xAB57: 
case 0xAB58: case 0xAB59: case 0xAB5A: 
case 0xAB60: case 0xAB61: case 0xAB62: case 0xAB63: case 0xAB64: case 0xAB65: goto _20;
default: goto _27;
}
} else {
if( input < 0xFF41 ) {
switch( input ) {
case 0xAB70: case 0xAB71: case 0xAB72: case 0xAB73: case 0xAB74: case 0xAB75: case 0xAB76: case 0xAB77: 
case 0xAB78: case 0xAB79: case 0xAB7A: case 0xAB7B: case 0xAB7C: case 0xAB7D: case 0xAB7E: case 0xAB7F: 
case 0xAB80: case 0xAB81: case 0xAB82: case 0xAB83: case 0xAB84: case 0xAB85: case 0xAB86: case 0xAB87: 
case 0xAB88: case 0xAB89: case 0xAB8A: case 0xAB8B: case 0xAB8C: case 0xAB8D: case 0xAB8E: case 0xAB8F: 
case 0xAB90: case 0xAB91: case 0xAB92: case 0xAB93: case 0xAB94: case 0xAB95: case 0xAB96: case 0xAB97: 
case 0xAB98: case 0xAB99: case 0xAB9A: case 0xAB9B: case 0xAB9C: case 0xAB9D: case 0xAB9E: case 0xAB9F: 
case 0xABA0: case 0xABA1: case 0xABA2: case 0xABA3: case 0xABA4: case 0xABA5: case 0xABA6: case 0xABA7: 
case 0xABA8: case 0xABA9: case 0xABAA: case 0xABAB: case 0xABAC: case 0xABAD: case 0xABAE: case 0xABAF: 
case 0xABB0: case 0xABB1: case 0xABB2: case 0xABB3: case 0xABB4: case 0xABB5: case 0xABB6: case 0xABB7: 
case 0xABB8: case 0xABB9: case 0xABBA: case 0xABBB: case 0xABBC: case 0xABBD: case 0xABBE: case 0xABBF: 
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: 
case 0xFB13: case 0xFB14: case 0xFB15: case 0xFB16: case 0xFB17: 
case 0xFF21: case 0xFF22: case 0xFF23: case 0xFF24: case 0xFF25: case 0xFF26: case 0xFF27: 
case 0xFF28: case 0xFF29: case 0xFF2A: case 0xFF2B: case 0xFF2C: case 0xFF2D: case 0xFF2E: case 0xFF2F: 
case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37: 
case 0xFF38: case 0xFF39: case 0xFF3A: goto _20;
default: goto _27;
}
} else {
switch( input ) {
case 0xFF41: case 0xFF42: case 0xFF43: case 0xFF44: case 0xFF45: case 0xFF46: case 0xFF47: 
case 0xFF48: case 0xFF49: case 0xFF4A: case 0xFF4B: case 0xFF4C: case 0xFF4D: case 0xFF4E: case 0xFF4F: 
case 0xFF50: case 0xFF51: case 0xFF52: case 0xFF53: case 0xFF54: case 0xFF55: case 0xFF56: case 0xFF57: 
case 0xFF58: case 0xFF59: case 0xFF5A: 
case 0x10400: case 0x10401: case 0x10402: case 0x10403: case 0x10404: case 0x10405: case 0x10406: case 0x10407: 
case 0x10408: case 0x10409: case 0x1040A: case 0x1040B: case 0x1040C: case 0x1040D: case 0x1040E: case 0x1040F: 
case 0x10410: case 0x10411: case 0x10412: case 0x10413: case 0x10414: case 0x10415: case 0x10416: case 0x10417: 
case 0x10418: case 0x10419: case 0x1041A: case 0x1041B: case 0x1041C: case 0x1041D: case 0x1041E: case 0x1041F: 
case 0x10420: case 0x10421: case 0x10422: case 0x10423: case 0x10424: case 0x10425: case 0x10426: case 0x10427: 
case 0x10428: case 0x10429: case 0x1042A: case 0x1042B: case 0x1042C: case 0x1042D: case 0x1042E: case 0x1042F: 
case 0x10430: case 0x10431: case 0x10432: case 0x10433: case 0x10434: case 0x10435: case 0x10436: case 0x10437: 
case 0x10438: case 0x10439: case 0x1043A: case 0x1043B: case 0x1043C: case 0x1043D: case 0x1043E: case 0x1043F: 
case 0x10440: case 0x10441: case 0x10442: case 0x10443: case 0x10444: case 0x10445: case 0x10446: case 0x10447: 
case 0x10448: case 0x10449: case 0x1044A: case 0x1044B: case 0x1044C: case 0x1044D: case 0x1044E: case 0x1044F: 
case 0x10C80: case 0x10C81: case 0x10C82: case 0x10C83: case 0x10C84: case 0x10C85: case 0x10C86: case 0x10C87: 
case 0x10C88: case 0x10C89: case 0x10C8A: case 0x10C8B: case 0x10C8C: case 0x10C8D: case 0x10C8E: case 0x10C8F: 
case 0x10C90: case 0x10C91: case 0x10C92: case 0x10C93: case 0x10C94: case 0x10C95: case 0x10C96: case 0x10C97: 
case 0x10C98: case 0x10C99: case 0x10C9A: case 0x10C9B: case 0x10C9C: case 0x10C9D: case 0x10C9E: case 0x10C9F: 
case 0x10CA0: case 0x10CA1: case 0x10CA2: case 0x10CA3: case 0x10CA4: case 0x10CA5: case 0x10CA6: case 0x10CA7: 
case 0x10CA8: case 0x10CA9: case 0x10CAA: case 0x10CAB: case 0x10CAC: case 0x10CAD: case 0x10CAE: case 0x10CAF: 
case 0x10CB0: case 0x10CB1: case 0x10CB2: 
case 0x10CC0: case 0x10CC1: case 0x10CC2: case 0x10CC3: case 0x10CC4: case 0x10CC5: case 0x10CC6: case 0x10CC7: 
case 0x10CC8: case 0x10CC9: case 0x10CCA: case 0x10CCB: case 0x10CCC: case 0x10CCD: case 0x10CCE: case 0x10CCF: 
case 0x10CD0: case 0x10CD1: case 0x10CD2: case 0x10CD3: case 0x10CD4: case 0x10CD5: case 0x10CD6: case 0x10CD7: 
case 0x10CD8: case 0x10CD9: case 0x10CDA: case 0x10CDB: case 0x10CDC: case 0x10CDD: case 0x10CDE: case 0x10CDF: 
case 0x10CE0: case 0x10CE1: case 0x10CE2: case 0x10CE3: case 0x10CE4: case 0x10CE5: case 0x10CE6: case 0x10CE7: 
case 0x10CE8: case 0x10CE9: case 0x10CEA: case 0x10CEB: case 0x10CEC: case 0x10CED: case 0x10CEE: case 0x10CEF: 
case 0x10CF0: case 0x10CF1: case 0x10CF2: goto _20;
default: goto _27;
}
}
}
}
} else {
if( input < 0x1D53F ) {
if( input < 0x1D4BA ) {
switch( input ) {
case 0x118A0: case 0x118A1: case 0x118A2: case 0x118A3: case 0x118A4: case 0x118A5: case 0x118A6: case 0x118A7: 
case 0x118A8: case 0x118A9: case 0x118AA: case 0x118AB: case 0x118AC: case 0x118AD: case 0x118AE: case 0x118AF: 
case 0x118B0: case 0x118B1: case 0x118B2: case 0x118B3: case 0x118B4: case 0x118B5: case 0x118B6: case 0x118B7: 
case 0x118B8: case 0x118B9: case 0x118BA: case 0x118BB: case 0x118BC: case 0x118BD: case 0x118BE: case 0x118BF: 
case 0x118C0: case 0x118C1: case 0x118C2: case 0x118C3: case 0x118C4: case 0x118C5: case 0x118C6: case 0x118C7: 
case 0x118C8: case 0x118C9: case 0x118CA: case 0x118CB: case 0x118CC: case 0x118CD: case 0x118CE: case 0x118CF: 
case 0x118D0: case 0x118D1: case 0x118D2: case 0x118D3: case 0x118D4: case 0x118D5: case 0x118D6: case 0x118D7: 
case 0x118D8: case 0x118D9: case 0x118DA: case 0x118DB: case 0x118DC: case 0x118DD: case 0x118DE: case 0x118DF: 
case 0x1D400: case 0x1D401: case 0x1D402: case 0x1D403: case 0x1D404: case 0x1D405: case 0x1D406: case 0x1D407: 
case 0x1D408: case 0x1D409: case 0x1D40A: case 0x1D40B: case 0x1D40C: case 0x1D40D: case 0x1D40E: case 0x1D40F: 
case 0x1D410: case 0x1D411: case 0x1D412: case 0x1D413: case 0x1D414: case 0x1D415: case 0x1D416: case 0x1D417: 
case 0x1D418: case 0x1D419: case 0x1D41A: case 0x1D41B: case 0x1D41C: case 0x1D41D: case 0x1D41E: case 0x1D41F: 
case 0x1D420: case 0x1D421: case 0x1D422: case 0x1D423: case 0x1D424: case 0x1D425: case 0x1D426: case 0x1D427: 
case 0x1D428: case 0x1D429: case 0x1D42A: case 0x1D42B: case 0x1D42C: case 0x1D42D: case 0x1D42E: case 0x1D42F: 
case 0x1D430: case 0x1D431: case 0x1D432: case 0x1D433: case 0x1D434: case 0x1D435: case 0x1D436: case 0x1D437: 
case 0x1D438: case 0x1D439: case 0x1D43A: case 0x1D43B: case 0x1D43C: case 0x1D43D: case 0x1D43E: case 0x1D43F: 
case 0x1D440: case 0x1D441: case 0x1D442: case 0x1D443: case 0x1D444: case 0x1D445: case 0x1D446: case 0x1D447: 
case 0x1D448: case 0x1D449: case 0x1D44A: case 0x1D44B: case 0x1D44C: case 0x1D44D: case 0x1D44E: case 0x1D44F: 
case 0x1D450: case 0x1D451: case 0x1D452: case 0x1D453: case 0x1D454: 
case 0x1D456: case 0x1D457: 
case 0x1D458: case 0x1D459: case 0x1D45A: case 0x1D45B: case 0x1D45C: case 0x1D45D: case 0x1D45E: case 0x1D45F: 
case 0x1D460: case 0x1D461: case 0x1D462: case 0x1D463: case 0x1D464: case 0x1D465: case 0x1D466: case 0x1D467: 
case 0x1D468: case 0x1D469: case 0x1D46A: case 0x1D46B: case 0x1D46C: case 0x1D46D: case 0x1D46E: case 0x1D46F: 
case 0x1D470: case 0x1D471: case 0x1D472: case 0x1D473: case 0x1D474: case 0x1D475: case 0x1D476: case 0x1D477: 
case 0x1D478: case 0x1D479: case 0x1D47A: case 0x1D47B: case 0x1D47C: case 0x1D47D: case 0x1D47E: case 0x1D47F: 
case 0x1D480: case 0x1D481: case 0x1D482: case 0x1D483: case 0x1D484: case 0x1D485: case 0x1D486: case 0x1D487: 
case 0x1D488: case 0x1D489: case 0x1D48A: case 0x1D48B: case 0x1D48C: case 0x1D48D: case 0x1D48E: case 0x1D48F: 
case 0x1D490: case 0x1D491: case 0x1D492: case 0x1D493: case 0x1D494: case 0x1D495: case 0x1D496: case 0x1D497: 
case 0x1D498: case 0x1D499: case 0x1D49A: case 0x1D49B: case 0x1D49C: 
case 0x1D49E: case 0x1D49F: 
case 0x1D4A2: 
case 0x1D4A5: case 0x1D4A6: 
case 0x1D4A9: case 0x1D4AA: case 0x1D4AB: case 0x1D4AC: 
case 0x1D4AE: case 0x1D4AF: 
case 0x1D4B0: case 0x1D4B1: case 0x1D4B2: case 0x1D4B3: case 0x1D4B4: case 0x1D4B5: case 0x1D4B6: case 0x1D4B7: 
case 0x1D4B8: case 0x1D4B9: goto _20;
default: goto _27;
}
} else {
switch( input ) {
case 0x1D4BA: 
case 0x1D4BC: 
case 0x1D4C4: 
case 0x1D506: 
case 0x1D50B: case 0x1D50C: 
case 0x1D515: 
case 0x1D51D: 
case 0x1D53A: goto _27;
default: goto _20;
}
}
} else {
if( input < 0x1D6FC ) {
switch( input ) {
case 0x1D53F: 
case 0x1D545: 
case 0x1D547: case 0x1D548: case 0x1D549: 
case 0x1D551: 
case 0x1D6A6: case 0x1D6A7: 
case 0x1D6C1: 
case 0x1D6DB: 
case 0x1D6FB: goto _27;
default: goto _20;
}
} else {
switch( input ) {
case 0x1D6FC: case 0x1D6FD: case 0x1D6FE: case 0x1D6FF: 
case 0x1D700: case 0x1D701: case 0x1D702: case 0x1D703: case 0x1D704: case 0x1D705: case 0x1D706: case 0x1D707: 
case 0x1D708: case 0x1D709: case 0x1D70A: case 0x1D70B: case 0x1D70C: case 0x1D70D: case 0x1D70E: case 0x1D70F: 
case 0x1D710: case 0x1D711: case 0x1D712: case 0x1D713: case 0x1D714: 
case 0x1D716: case 0x1D717: 
case 0x1D718: case 0x1D719: case 0x1D71A: case 0x1D71B: case 0x1D71C: case 0x1D71D: case 0x1D71E: case 0x1D71F: 
case 0x1D720: case 0x1D721: case 0x1D722: case 0x1D723: case 0x1D724: case 0x1D725: case 0x1D726: case 0x1D727: 
case 0x1D728: case 0x1D729: case 0x1D72A: case 0x1D72B: case 0x1D72C: case 0x1D72D: case 0x1D72E: case 0x1D72F: 
case 0x1D730: case 0x1D731: case 0x1D732: case 0x1D733: case 0x1D734: 
case 0x1D736: case 0x1D737: 
case 0x1D738: case 0x1D739: case 0x1D73A: case 0x1D73B: case 0x1D73C: case 0x1D73D: case 0x1D73E: case 0x1D73F: 
case 0x1D740: case 0x1D741: case 0x1D742: case 0x1D743: case 0x1D744: case 0x1D745: case 0x1D746: case 0x1D747: 
case 0x1D748: case 0x1D749: case 0x1D74A: case 0x1D74B: case 0x1D74C: case 0x1D74D: case 0x1D74E: 
case 0x1D750: case 0x1D751: case 0x1D752: case 0x1D753: case 0x1D754: case 0x1D755: case 0x1D756: case 0x1D757: 
case 0x1D758: case 0x1D759: case 0x1D75A: case 0x1D75B: case 0x1D75C: case 0x1D75D: case 0x1D75E: case 0x1D75F: 
case 0x1D760: case 0x1D761: case 0x1D762: case 0x1D763: case 0x1D764: case 0x1D765: case 0x1D766: case 0x1D767: 
case 0x1D768: case 0x1D769: case 0x1D76A: case 0x1D76B: case 0x1D76C: case 0x1D76D: case 0x1D76E: 
case 0x1D770: case 0x1D771: case 0x1D772: case 0x1D773: case 0x1D774: case 0x1D775: case 0x1D776: case 0x1D777: 
case 0x1D778: case 0x1D779: case 0x1D77A: case 0x1D77B: case 0x1D77C: case 0x1D77D: case 0x1D77E: case 0x1D77F: 
case 0x1D780: case 0x1D781: case 0x1D782: case 0x1D783: case 0x1D784: case 0x1D785: case 0x1D786: case 0x1D787: 
case 0x1D788: 
case 0x1D78A: case 0x1D78B: case 0x1D78C: case 0x1D78D: case 0x1D78E: case 0x1D78F: 
case 0x1D790: case 0x1D791: case 0x1D792: case 0x1D793: case 0x1D794: case 0x1D795: case 0x1D796: case 0x1D797: 
case 0x1D798: case 0x1D799: case 0x1D79A: case 0x1D79B: case 0x1D79C: case 0x1D79D: case 0x1D79E: case 0x1D79F: 
case 0x1D7A0: case 0x1D7A1: case 0x1D7A2: case 0x1D7A3: case 0x1D7A4: case 0x1D7A5: case 0x1D7A6: case 0x1D7A7: 
case 0x1D7A8: 
case 0x1D7AA: case 0x1D7AB: case 0x1D7AC: case 0x1D7AD: case 0x1D7AE: case 0x1D7AF: 
case 0x1D7B0: case 0x1D7B1: case 0x1D7B2: case 0x1D7B3: case 0x1D7B4: case 0x1D7B5: case 0x1D7B6: case 0x1D7B7: 
case 0x1D7B8: case 0x1D7B9: case 0x1D7BA: case 0x1D7BB: case 0x1D7BC: case 0x1D7BD: case 0x1D7BE: case 0x1D7BF: 
case 0x1D7C0: case 0x1D7C1: case 0x1D7C2: 
case 0x1D7C4: case 0x1D7C5: case 0x1D7C6: case 0x1D7C7: case 0x1D7C8: case 0x1D7C9: case 0x1D7CA: case 0x1D7CB: goto _20;
default: goto _27;
}
}
}
}
}


    __quex_assert_no_passage();
_19:
    /* (297386 from 297389) (297386 from 297388)  */
    goto _70;


    __quex_assert_no_passage();
_40:
    /* (297386 from RELOAD_FORWARD)  */
    goto _71;


    __quex_assert_no_passage();
_20:
    /* (297387 from 297386) (297387 from 297387) (297387 from 297388)  */

    ++(me->buffer._read_p);

_74:
    input = *(me->buffer._read_p);


    __quex_debug_state(297387);
if( input < 0x2400 ) {
if( input < 0x1E00 ) {
if( input < 0xA1 ) {
switch( input ) {
case 0x0: goto _43;
case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: goto _20;
case 0x2D: goto _21;
case 0x2E: case 0x2F: 
case 0x30: case 0x31: case 0x32: case 0x33: case 0x34: case 0x35: case 0x36: case 0x37: 
case 0x38: case 0x39: case 0x3A: case 0x3B: case 0x3C: case 0x3D: case 0x3E: case 0x3F: 
case 0x40: case 0x41: case 0x42: case 0x43: case 0x44: case 0x45: case 0x46: case 0x47: 
case 0x48: case 0x49: case 0x4A: case 0x4B: case 0x4C: case 0x4D: case 0x4E: case 0x4F: 
case 0x50: case 0x51: case 0x52: case 0x53: case 0x54: case 0x55: case 0x56: case 0x57: 
case 0x58: case 0x59: case 0x5A: case 0x5B: case 0x5C: case 0x5D: case 0x5E: case 0x5F: 
case 0x60: case 0x61: case 0x62: case 0x63: case 0x64: case 0x65: case 0x66: case 0x67: 
case 0x68: case 0x69: case 0x6A: case 0x6B: case 0x6C: case 0x6D: case 0x6E: case 0x6F: 
case 0x70: case 0x71: case 0x72: case 0x73: case 0x74: case 0x75: case 0x76: case 0x77: 
case 0x78: case 0x79: case 0x7A: case 0x7B: case 0x7C: case 0x7D: case 0x7E: goto _20;
default: goto _28;
}
} else {
if( input < 0x250 ) {
if( input == 0xAD )  goto _28;
else                 goto _20;
} else {
if     ( input < 0x2B0 )   goto _28;
else if( input < 0x530 )   goto _20;
else if( input < 0x1D00 )  goto _28;
else                       goto _20;
}
}
} else {
if( input < 0x2065 ) {
if( input < 0x2010 ) {
if     ( input < 0x1F00 )  goto _28;
else if( input < 0x2000 )  goto _20;
else                       goto _28;
} else {
if     ( input < 0x2028 )  goto _20;
else if( input < 0x2030 )  goto _28;
else if( input < 0x205F )  goto _20;
else                       goto _28;
}
} else {
switch( input ) {
case 0x2066: case 0x2067: 
case 0x2068: case 0x2069: case 0x206A: case 0x206B: case 0x206C: case 0x206D: case 0x206E: case 0x206F: 
case 0x2070: case 0x2071: case 0x2072: case 0x2073: case 0x2074: case 0x2075: case 0x2076: case 0x2077: 
case 0x2078: case 0x2079: case 0x207A: case 0x207B: case 0x207C: case 0x207D: case 0x207E: case 0x207F: 
case 0x2080: case 0x2081: case 0x2082: case 0x2083: case 0x2084: case 0x2085: case 0x2086: case 0x2087: 
case 0x2088: case 0x2089: case 0x208A: case 0x208B: case 0x208C: case 0x208D: case 0x208E: case 0x208F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: case 0x209D: case 0x209E: case 0x209F: 
case 0x20D0: case 0x20D1: case 0x20D2: case 0x20D3: case 0x20D4: case 0x20D5: case 0x20D6: case 0x20D7: 
case 0x20D8: case 0x20D9: case 0x20DA: case 0x20DB: case 0x20DC: case 0x20DD: case 0x20DE: case 0x20DF: 
case 0x20E0: case 0x20E1: case 0x20E2: case 0x20E3: case 0x20E4: case 0x20E5: case 0x20E6: case 0x20E7: 
case 0x20E8: case 0x20E9: case 0x20EA: case 0x20EB: case 0x20EC: case 0x20ED: case 0x20EE: case 0x20EF: 
case 0x20F0: case 0x20F1: case 0x20F2: case 0x20F3: case 0x20F4: case 0x20F5: case 0x20F6: case 0x20F7: 
case 0x20F8: case 0x20F9: case 0x20FA: case 0x20FB: case 0x20FC: case 0x20FD: case 0x20FE: case 0x20FF: 
case 0x2150: case 0x2151: case 0x2152: case 0x2153: case 0x2154: case 0x2155: case 0x2156: case 0x2157: 
case 0x2158: case 0x2159: case 0x215A: case 0x215B: case 0x215C: case 0x215D: case 0x215E: case 0x215F: 
case 0x2160: case 0x2161: case 0x2162: case 0x2163: case 0x2164: case 0x2165: case 0x2166: case 0x2167: 
case 0x2168: case 0x2169: case 0x216A: case 0x216B: case 0x216C: case 0x216D: case 0x216E: case 0x216F: 
case 0x2170: case 0x2171: case 0x2172: case 0x2173: case 0x2174: case 0x2175: case 0x2176: case 0x2177: 
case 0x2178: case 0x2179: case 0x217A: case 0x217B: case 0x217C: case 0x217D: case 0x217E: case 0x217F: 
case 0x2180: case 0x2181: case 0x2182: case 0x2183: case 0x2184: case 0x2185: case 0x2186: case 0x2187: 
case 0x2188: case 0x2189: case 0x218A: case 0x218B: case 0x218C: case 0x218D: case 0x218E: case 0x218F: goto _28;
default: goto _20;
}
}
}
} else {
if( input < 0xFB50 ) {
if( input < 0x2C60 ) {
if( input < 0x27C0 ) {
if     ( input < 0x25A0 )  goto _28;
else if( input < 0x2700 )  goto _20;
else                       goto _28;
} else {
if     ( input < 0x2800 )  goto _20;
else if( input < 0x2900 )  goto _28;
else if( input < 0x2C00 )  goto _20;
else                       goto _28;
}
} else {
if( input < 0x2E80 ) {
if     ( input < 0x2C80 )  goto _20;
else if( input < 0x2E00 )  goto _28;
else                       goto _20;
} else {
if     ( input < 0xA720 )  goto _28;
else if( input < 0xA800 )  goto _20;
else if( input < 0xFB00 )  goto _28;
else                       goto _20;
}
}
} else {
if( input < 0x1D100 ) {
switch( input ) {
case 0xFFF0: case 0xFFF1: case 0xFFF2: case 0xFFF3: case 0xFFF4: case 0xFFF5: case 0xFFF6: case 0xFFF7: 
case 0xFFF8: 
case 0xFFFC: case 0xFFFD: case 0xFFFE: case 0xFFFF: 
case 0x10140: case 0x10141: case 0x10142: case 0x10143: case 0x10144: case 0x10145: case 0x10146: case 0x10147: 
case 0x10148: case 0x10149: case 0x1014A: case 0x1014B: case 0x1014C: case 0x1014D: case 0x1014E: case 0x1014F: 
case 0x10150: case 0x10151: case 0x10152: case 0x10153: case 0x10154: case 0x10155: case 0x10156: case 0x10157: 
case 0x10158: case 0x10159: case 0x1015A: case 0x1015B: case 0x1015C: case 0x1015D: case 0x1015E: case 0x1015F: 
case 0x10160: case 0x10161: case 0x10162: case 0x10163: case 0x10164: case 0x10165: case 0x10166: case 0x10167: 
case 0x10168: case 0x10169: case 0x1016A: case 0x1016B: case 0x1016C: case 0x1016D: case 0x1016E: case 0x1016F: 
case 0x10170: case 0x10171: case 0x10172: case 0x10173: case 0x10174: case 0x10175: case 0x10176: case 0x10177: 
case 0x10178: case 0x10179: case 0x1017A: case 0x1017B: case 0x1017C: case 0x1017D: case 0x1017E: case 0x1017F: 
case 0x10180: case 0x10181: case 0x10182: case 0x10183: case 0x10184: case 0x10185: case 0x10186: case 0x10187: 
case 0x10188: case 0x10189: case 0x1018A: case 0x1018B: case 0x1018C: case 0x1018D: case 0x1018E: case 0x1018F: goto _20;
default: goto _28;
}
} else {
if( input < 0x1D400 ) {
if     ( input < 0x1D173 )  goto _20;
else if( input < 0x1D17B )  goto _28;
else if( input < 0x1D200 )  goto _20;
else                        goto _28;
} else {
if     ( input < 0x1D800 )  goto _20;
else if( input < 0x1F600 )  goto _28;
else if( input < 0x1F916 )  goto _20;
else                        goto _28;
}
}
}
}


    __quex_assert_no_passage();
_42:
    /* (297387 from RELOAD_FORWARD)  */
    goto _74;


    __quex_assert_no_passage();
_21:
    /* (297388 from 297388) (297388 from 297387)  */

    ++(me->buffer._read_p);

    { last_acceptance = 1714; __quex_debug("last_acceptance = 1714\n"); }

_77:
    input = *(me->buffer._read_p);


    __quex_debug_state(297388);
if( input < 0x2150 ) {
if( input < 0x2B0 ) {
if( input < 0x2E ) {
switch( input ) {
case 0x0: goto _45;
case 0xA: case 0xB: case 0xC: case 0xD: goto _19;
case 0x21: case 0x22: case 0x23: case 0x24: case 0x25: case 0x26: case 0x27: 
case 0x28: case 0x29: case 0x2A: case 0x2B: case 0x2C: goto _20;
case 0x2D: goto _21;
default: goto _28;
}
} else {
switch( input ) {
case 0x7F: case 0x80: case 0x81: case 0x82: case 0x83: case 0x84: goto _28;
case 0x85: goto _19;
case 0x86: case 0x87: 
case 0x88: case 0x89: case 0x8A: case 0x8B: case 0x8C: case 0x8D: case 0x8E: case 0x8F: 
case 0x90: case 0x91: case 0x92: case 0x93: case 0x94: case 0x95: case 0x96: case 0x97: 
case 0x98: case 0x99: case 0x9A: case 0x9B: case 0x9C: case 0x9D: case 0x9E: case 0x9F: 
case 0xA0: 
case 0xAD: 
case 0x250: case 0x251: case 0x252: case 0x253: case 0x254: case 0x255: case 0x256: case 0x257: 
case 0x258: case 0x259: case 0x25A: case 0x25B: case 0x25C: case 0x25D: case 0x25E: case 0x25F: 
case 0x260: case 0x261: case 0x262: case 0x263: case 0x264: case 0x265: case 0x266: case 0x267: 
case 0x268: case 0x269: case 0x26A: case 0x26B: case 0x26C: case 0x26D: case 0x26E: case 0x26F: 
case 0x270: case 0x271: case 0x272: case 0x273: case 0x274: case 0x275: case 0x276: case 0x277: 
case 0x278: case 0x279: case 0x27A: case 0x27B: case 0x27C: case 0x27D: case 0x27E: case 0x27F: 
case 0x280: case 0x281: case 0x282: case 0x283: case 0x284: case 0x285: case 0x286: case 0x287: 
case 0x288: case 0x289: case 0x28A: case 0x28B: case 0x28C: case 0x28D: case 0x28E: case 0x28F: 
case 0x290: case 0x291: case 0x292: case 0x293: case 0x294: case 0x295: case 0x296: case 0x297: 
case 0x298: case 0x299: case 0x29A: case 0x29B: case 0x29C: case 0x29D: case 0x29E: case 0x29F: 
case 0x2A0: case 0x2A1: case 0x2A2: case 0x2A3: case 0x2A4: case 0x2A5: case 0x2A6: case 0x2A7: 
case 0x2A8: case 0x2A9: case 0x2AA: case 0x2AB: case 0x2AC: case 0x2AD: case 0x2AE: case 0x2AF: goto _28;
default: goto _20;
}
}
} else {
if( input < 0x202A ) {
if( input < 0x1F00 ) {
if     ( input < 0x530 )   goto _20;
else if( input < 0x1D00 )  goto _28;
else if( input < 0x1E00 )  goto _20;
else                       goto _28;
} else {
if     ( input < 0x2000 )  goto _20;
else if( input < 0x2010 )  goto _28;
else if( input < 0x2028 )  goto _20;
else                       goto _19;
}
} else {
switch( input ) {
case 0x202A: case 0x202B: case 0x202C: case 0x202D: case 0x202E: case 0x202F: 
case 0x205F: case 0x2060: case 0x2061: case 0x2062: case 0x2063: case 0x2064: 
case 0x2066: case 0x2067: 
case 0x2068: case 0x2069: case 0x206A: case 0x206B: case 0x206C: case 0x206D: case 0x206E: case 0x206F: 
case 0x2070: case 0x2071: case 0x2072: case 0x2073: case 0x2074: case 0x2075: case 0x2076: case 0x2077: 
case 0x2078: case 0x2079: case 0x207A: case 0x207B: case 0x207C: case 0x207D: case 0x207E: case 0x207F: 
case 0x2080: case 0x2081: case 0x2082: case 0x2083: case 0x2084: case 0x2085: case 0x2086: case 0x2087: 
case 0x2088: case 0x2089: case 0x208A: case 0x208B: case 0x208C: case 0x208D: case 0x208E: case 0x208F: 
case 0x2090: case 0x2091: case 0x2092: case 0x2093: case 0x2094: case 0x2095: case 0x2096: case 0x2097: 
case 0x2098: case 0x2099: case 0x209A: case 0x209B: case 0x209C: case 0x209D: case 0x209E: case 0x209F: 
case 0x20D0: case 0x20D1: case 0x20D2: case 0x20D3: case 0x20D4: case 0x20D5: case 0x20D6: case 0x20D7: 
case 0x20D8: case 0x20D9: case 0x20DA: case 0x20DB: case 0x20DC: case 0x20DD: case 0x20DE: case 0x20DF: 
case 0x20E0: case 0x20E1: case 0x20E2: case 0x20E3: case 0x20E4: case 0x20E5: case 0x20E6: case 0x20E7: 
case 0x20E8: case 0x20E9: case 0x20EA: case 0x20EB: case 0x20EC: case 0x20ED: case 0x20EE: case 0x20EF: 
case 0x20F0: case 0x20F1: case 0x20F2: case 0x20F3: case 0x20F4: case 0x20F5: case 0x20F6: case 0x20F7: 
case 0x20F8: case 0x20F9: case 0x20FA: case 0x20FB: case 0x20FC: case 0x20FD: case 0x20FE: case 0x20FF: goto _28;
default: goto _20;
}
}
}
} else {
if( input < 0xFB00 ) {
if( input < 0x2900 ) {
if( input < 0x25A0 ) {
if     ( input < 0x2190 )  goto _28;
else if( input < 0x2400 )  goto _20;
else                       goto _28;
} else {
if     ( input < 0x2700 )  goto _20;
else if( input < 0x27C0 )  goto _28;
else if( input < 0x2800 )  goto _20;
else                       goto _28;
}
} else {
if( input < 0x2E00 ) {
if     ( input < 0x2C00 )  goto _20;
else if( input < 0x2C60 )  goto _28;
else if( input < 0x2C80 )  goto _20;
else                       goto _28;
} else {
if     ( input < 0x2E80 )  goto _20;
else if( input < 0xA720 )  goto _28;
else if( input < 0xA800 )  goto _20;
else                       goto _28;
}
}
} else {
if( input < 0x1D100 ) {
switch( input ) {
case 0xFB00: case 0xFB01: case 0xFB02: case 0xFB03: case 0xFB04: case 0xFB05: case 0xFB06: case 0xFB07: 
case 0xFB08: case 0xFB09: case 0xFB0A: case 0xFB0B: case 0xFB0C: case 0xFB0D: case 0xFB0E: case 0xFB0F: 
case 0xFB10: case 0xFB11: case 0xFB12: case 0xFB13: case 0xFB14: case 0xFB15: case 0xFB16: case 0xFB17: 
case 0xFB18: case 0xFB19: case 0xFB1A: case 0xFB1B: case 0xFB1C: case 0xFB1D: case 0xFB1E: case 0xFB1F: 
case 0xFB20: case 0xFB21: case 0xFB22: case 0xFB23: case 0xFB24: case 0xFB25: case 0xFB26: case 0xFB27: 
case 0xFB28: case 0xFB29: case 0xFB2A: case 0xFB2B: case 0xFB2C: case 0xFB2D: case 0xFB2E: case 0xFB2F: 
case 0xFB30: case 0xFB31: case 0xFB32: case 0xFB33: case 0xFB34: case 0xFB35: case 0xFB36: case 0xFB37: 
case 0xFB38: case 0xFB39: case 0xFB3A: case 0xFB3B: case 0xFB3C: case 0xFB3D: case 0xFB3E: case 0xFB3F: 
case 0xFB40: case 0xFB41: case 0xFB42: case 0xFB43: case 0xFB44: case 0xFB45: case 0xFB46: case 0xFB47: 
case 0xFB48: case 0xFB49: case 0xFB4A: case 0xFB4B: case 0xFB4C: case 0xFB4D: case 0xFB4E: case 0xFB4F: 
case 0xFFF0: case 0xFFF1: case 0xFFF2: case 0xFFF3: case 0xFFF4: case 0xFFF5: case 0xFFF6: case 0xFFF7: 
case 0xFFF8: 
case 0xFFFC: case 0xFFFD: case 0xFFFE: case 0xFFFF: 
case 0x10140: case 0x10141: case 0x10142: case 0x10143: case 0x10144: case 0x10145: case 0x10146: case 0x10147: 
case 0x10148: case 0x10149: case 0x1014A: case 0x1014B: case 0x1014C: case 0x1014D: case 0x1014E: case 0x1014F: 
case 0x10150: case 0x10151: case 0x10152: case 0x10153: case 0x10154: case 0x10155: case 0x10156: case 0x10157: 
case 0x10158: case 0x10159: case 0x1015A: case 0x1015B: case 0x1015C: case 0x1015D: case 0x1015E: case 0x1015F: 
case 0x10160: case 0x10161: case 0x10162: case 0x10163: case 0x10164: case 0x10165: case 0x10166: case 0x10167: 
case 0x10168: case 0x10169: case 0x1016A: case 0x1016B: case 0x1016C: case 0x1016D: case 0x1016E: case 0x1016F: 
case 0x10170: case 0x10171: case 0x10172: case 0x10173: case 0x10174: case 0x10175: case 0x10176: case 0x10177: 
case 0x10178: case 0x10179: case 0x1017A: case 0x1017B: case 0x1017C: case 0x1017D: case 0x1017E: case 0x1017F: 
case 0x10180: case 0x10181: case 0x10182: case 0x10183: case 0x10184: case 0x10185: case 0x10186: case 0x10187: 
case 0x10188: case 0x10189: case 0x1018A: case 0x1018B: case 0x1018C: case 0x1018D: case 0x1018E: case 0x1018F: goto _20;
default: goto _28;
}
} else {
if( input < 0x1D400 ) {
if     ( input < 0x1D173 )  goto _20;
else if( input < 0x1D17B )  goto _28;
else if( input < 0x1D200 )  goto _20;
else                        goto _28;
} else {
if     ( input < 0x1D800 )  goto _20;
else if( input < 0x1F600 )  goto _28;
else if( input < 0x1F916 )  goto _20;
else                        goto _28;
}
}
}
}


    __quex_assert_no_passage();
_44:
    /* (297388 from RELOAD_FORWARD)  */
    goto _77;


    __quex_assert_no_passage();
_22:
    /* (297389 from 297383)  */
    ++(me->buffer._read_p);

_79:
    input = *(me->buffer._read_p);


    __quex_debug_state(297389);
switch( input ) {
case 0x0: goto _47;
case 0xA: case 0xB: case 0xC: case 0xD: 
case 0x85: 
case 0x2028: case 0x2029: goto _19;
default: goto _26;
}


    __quex_assert_no_passage();
_46:
    /* (297389 from RELOAD_FORWARD)  */
    goto _79;

    /* (*) Terminal states _______________________________________________________
     *
     * States that implement actions of the 'winner patterns.                     */
_3:
    __quex_debug("* TERMINAL BAD_LEXATOM\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
{
self.error_code = E_Error_NoHandler_OnBadLexatom;
self_send(QUEX_TOKEN_ID(TERMINATION));
__QUEX_PURE_RETURN;;

}
    /* Bad lexatom detection FORCES a return from the lexical analyzer, so that no
     * tokens can be filled after the termination token.
     */
__QUEX_PURE_RETURN;
_4:
    __quex_debug("* TERMINAL LOAD_FAILURE\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
{
self.error_code = E_Error_NoHandler_OnLoadFailure;
self_send(QUEX_TOKEN_ID(TERMINATION));
__QUEX_PURE_RETURN;;

}
    /* Load failure FORCES a return from the lexical analyzer, so that no
     * tokens can be filled after the termination token.
     */
__QUEX_PURE_RETURN;
_5:
    __quex_debug("* TERMINAL OVERFLOW\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
{
self.error_code = E_Error_NoHandler_OnOverflow;
self_send(QUEX_TOKEN_ID(TERMINATION));
__QUEX_PURE_RETURN;;

}
    /* Lexeme size exceeds buffer size. No further buffer load possible.
     */
__QUEX_PURE_RETURN;
_6:
    __quex_debug("* TERMINAL END_OF_STREAM\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
{

#   line 26 "hyphen.qx"
self_send(hyphen_TERMINATION);

__QUEX_PURE_RETURN;


#   line 3443 "hyphenLexer.cpp"

}
    /* End of Stream FORCES a return from the lexical analyzer, so that no
     * tokens can be filled after the termination token.
     */
__QUEX_PURE_RETURN;
_7:
    __quex_debug("* TERMINAL FAILURE\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
{

#   line 24 "hyphen.qx"
self_send(hyphen_TERMINATION);

__QUEX_PURE_RETURN;


#   line 3461 "hyphenLexer.cpp"

}
RETURN;
_8:
    __quex_debug("* TERMINAL SKIP_RANGE_OPEN\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
{
#define Counter counter
self.error_code = E_Error_NoHandler_OnSkipRangeOpen;
self_send(QUEX_TOKEN_ID(TERMINATION));
__QUEX_PURE_RETURN;;

}
    /* End of Stream appeared, while scanning for end of skip-range.
     */
__QUEX_PURE_RETURN;
_0:
    __quex_debug("* TERMINAL {HYPHEN}\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
QUEX_LEXEME_TERMINATING_ZERO_SET(&me->buffer);
{

#   line 17 "hyphen.qx"

        std::wstring LEX(self.hyphenation(Lexeme));
        self_send1(hyphen_LINE, LEX.c_str());
    

#   line 3490 "hyphenLexer.cpp"

}
RETURN;
_1:
    __quex_debug("* TERMINAL {NEWLINECHAR}+\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
{

#   line 21 "hyphen.qx"
QUEX_NAME_TOKEN(take_text)(self_write_token_p(), me->buffer._lexeme_start_p, me->buffer._read_p);
self_send(hyphen_NEWLINES);

__QUEX_PURE_RETURN;


#   line 3506 "hyphenLexer.cpp"

}
RETURN;
_2:
    __quex_debug("* TERMINAL {LINE}\n");
QUEX_FUNCTION_COUNT_ARBITRARY(&self, LexemeBegin, LexemeEnd);
{

#   line 22 "hyphen.qx"
QUEX_NAME_TOKEN(take_text)(self_write_token_p(), me->buffer._lexeme_start_p, me->buffer._read_p);
self_send(hyphen_LINE);

__QUEX_PURE_RETURN;


#   line 3522 "hyphenLexer.cpp"

}
RETURN;
if(0) {
    /* Avoid unreferenced labels. */
    goto _3;
    goto _4;
    goto _5;
    goto _6;
    goto _7;
    goto _8;
    goto _0;
    goto _1;
    goto _2;
}
#   ifndef QUEX_OPTION_COMPUTED_GOTOS
    __quex_assert_no_passage();
_85:
switch( target_state_index ) {
case 6: {
goto _6;}
case 9: {
goto _9;}
case 24: {
goto _24;}
case 25: {
goto _25;}
case 26: {
goto _26;}
case 27: {
goto _27;}
case 28: {
goto _28;}
case 30: {
goto _30;}
case 32: {
goto _32;}
case 34: {
goto _34;}
case 36: {
goto _36;}
case 38: {
goto _38;}
case 40: {
goto _40;}
case 42: {
goto _42;}
case 44: {
goto _44;}
case 46: {
goto _46;}
default: {
goto _46;}
}
#   endif /* QUEX_OPTION_COMPUTED_GOTOS */


    __quex_assert_no_passage();
_33:
    /* (RELOAD_FORWARD from 297382)  */
    target_state_index = QUEX_LABEL(32); target_state_else_index = QUEX_LABEL(25);

_80:

    __quex_debug3("RELOAD_FORWARD: success->%i; failure->%i", 
                  (int)target_state_index, (int)target_state_else_index);
    __quex_assert(*(me->buffer._read_p) == QUEX_SETTING_BUFFER_LIMIT_CODE);
    
    __quex_debug_reload_before();                 
    load_result = QUEX_NAME(Buffer_load_forward)(&me->buffer, (QUEX_TYPE_LEXATOM**)position, PositionRegisterN);
    __quex_debug_reload_after(load_result);

    switch( load_result ) {
    case E_LoadResult_DONE:              QUEX_GOTO_STATE(target_state_index);      
    case E_LoadResult_BAD_LEXATOM:       goto _3;
    case E_LoadResult_FAILURE:           goto _4;
    case E_LoadResult_NO_SPACE_FOR_LOAD: goto _5;
    case E_LoadResult_NO_MORE_DATA:      QUEX_GOTO_STATE(target_state_else_index); 
    default:                             __quex_assert(false);
    }


    __quex_assert_no_passage();
_29:
    /* (RELOAD_FORWARD from 297380)  */
    target_state_index = QUEX_LABEL(9); target_state_else_index = QUEX_LABEL(6);

    goto _80;


    __quex_assert_no_passage();
_31:
    /* (RELOAD_FORWARD from 297381)  */
    target_state_index = QUEX_LABEL(30); target_state_else_index = QUEX_LABEL(24);

    goto _80;


    __quex_assert_no_passage();
_35:
    /* (RELOAD_FORWARD from 297383)  */
    target_state_index = QUEX_LABEL(34); target_state_else_index = QUEX_LABEL(26);

    goto _80;


    __quex_assert_no_passage();
_37:
    /* (RELOAD_FORWARD from 297384)  */
    target_state_index = QUEX_LABEL(36); target_state_else_index = QUEX_LABEL(25);

    goto _80;


    __quex_assert_no_passage();
_39:
    /* (RELOAD_FORWARD from 297385)  */
    target_state_index = QUEX_LABEL(38); target_state_else_index = QUEX_LABEL(25);

    goto _80;


    __quex_assert_no_passage();
_41:
    /* (RELOAD_FORWARD from 297386)  */
    target_state_index = QUEX_LABEL(40); target_state_else_index = QUEX_LABEL(27);

    goto _80;


    __quex_assert_no_passage();
_43:
    /* (RELOAD_FORWARD from 297387)  */
    target_state_index = QUEX_LABEL(42); target_state_else_index = QUEX_LABEL(28);

    goto _80;


    __quex_assert_no_passage();
_45:
    /* (RELOAD_FORWARD from 297388)  */
    target_state_index = QUEX_LABEL(44); target_state_else_index = QUEX_LABEL(28);

    goto _80;


    __quex_assert_no_passage();
_47:
    /* (RELOAD_FORWARD from 297389)  */
    target_state_index = QUEX_LABEL(46); target_state_else_index = QUEX_LABEL(26);

    goto _80;

_81:
/* RETURN -- after executing 'on_after_match' code. */
    __QUEX_PURE_RETURN;


_82:
/* CONTINUE -- after executing 'on_after_match' code. */

_83:
/* CONTINUE -- without executing 'on_after_match' (e.g. on FAILURE). */


    /* Mode change = another function takes over the analysis.
     * => After mode change the analyzer function needs to be quit!
     * ASSERT: 'CONTINUE' after mode change is not allowed.                   */
    __quex_assert(   me->DEBUG_analyzer_function_at_entry 
                  == me->current_analyzer_function);


    if( QUEX_NAME(TokenQueue_is_full)(&self._token_queue) ) {
        return;
    }


goto _84;

    __quex_assert_no_passage();

    /* Following labels are referenced in macros. It cannot be detected
     * whether the macros are applied in user code or not. To avoid compiler.
     * warnings of unused labels, they are referenced in unreachable code.   */
    goto _81; /* in RETURN                */
    goto _82; /* in CONTINUE              */
    goto _83; /* in CONTINUE and skippers */
#   if ! defined(QUEX_OPTION_COMPUTED_GOTOS)
    goto _85; /* in QUEX_GOTO_STATE       */
#   endif

    /* Prevent compiler warning 'unused variable'.                           */
    (void)QUEX_LEXEME_NULL;
    /* target_state_index and target_state_else_index appear when 
     * QUEX_GOTO_STATE is used without computed goto-s.                      */
    (void)target_state_index;
    (void)target_state_else_index;

#   undef Lexeme
#   undef LexemeBegin
#   undef LexemeEnd
#   undef LexemeNull
#   undef LexemeL
#   undef PROGRAM
#   undef self
#   undef QUEX_LABEL_STATE_ROUTER
}
QUEX_NAMESPACE_MAIN_CLOSE


QUEX_NAMESPACE_MAIN_OPEN

bool
QUEX_NAME(user_constructor)(QUEX_TYPE_ANALYZER* me)
{
    (void)me;

    __quex_assert(QUEX_NAME(mode_db)[QUEX_NAME(ModeID_PROGRAM)]  == &(QUEX_NAME(PROGRAM)));


#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's constructor extensions _______________________________________*/

/* END: _______________________________________________________________________*/
#undef self
    return true;
}

void
QUEX_NAME(user_destructor)(QUEX_TYPE_ANALYZER* me)
{
    (void)me;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's constructor extensions _______________________________________*/

/* END: _______________________________________________________________________*/
#undef self
}

bool
QUEX_NAME(user_reset)(QUEX_TYPE_ANALYZER* me)
{
    (void)me;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's 'reset' ______________________________________________________*/

/* END: _______________________________________________________________________*/
#undef self
    return true;
}

void
QUEX_NAME(user_print)(QUEX_TYPE_ANALYZER* me)
{
    (void)me;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's constructor extensions _______________________________________*/

/* END: _______________________________________________________________________*/
#undef self
}

#ifdef QUEX_OPTION_INCLUDE_STACK

bool
QUEX_NAME(user_memento_pack)(QUEX_TYPE_ANALYZER* me, 
                             const char*         InputName, 
                             QUEX_NAME(Memento)* memento) 
{
    (void)me; (void)memento; (void)InputName;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's memento 'pack' _______________________________________________*/

/* END: _______________________________________________________________________*/
#undef self
    return true;
}

void
QUEX_NAME(user_memento_unpack)(QUEX_TYPE_ANALYZER*  me, 
                               QUEX_NAME(Memento)*  memento)
{
    (void)me; (void)memento;

#define self  (*(QUEX_TYPE_DERIVED_ANALYZER*)me)
/* START: User's memento 'unpack' _____________________________________________*/

/* END: _______________________________________________________________________*/
#undef self
}
#endif /* QUEX_OPTION_INCLUDE_STACK */

QUEX_NAMESPACE_MAIN_CLOSE



#include "hyphenLexer-token"
QUEX_NAMESPACE_TOKEN_OPEN
QUEX_TYPE_LEXATOM   QUEX_NAME_TOKEN(LexemeNull) = (QUEX_TYPE_LEXATOM)0;
QUEX_NAMESPACE_TOKEN_CLOSE


